var Lyte = {};
Lyte.Compile = {}
Lyte.Component = {}
Lyte.Mixin = {}
Lyte.Router = {}
Lyte.Security = {}
Lyte.patterns ={}

Lyte.Compile.getArrayIndex = function(array, value) {}
Lyte.Compile.getHelper = function(dynamicValue, newCompile) {}
Lyte.Compile.getHelperArgValue = function(argValue, newCompile) {}
Lyte.Compile.getHelperArgs = function(str, newCompile) {}
Lyte.Compile.getHelperInfo = function(dynamicValue, helperValue, newCompile) {}
Lyte.Compile.getMustache = function(value, flag) {}
Lyte.Compile.getTrimmedContent = function(content, position, node) {}
Lyte.Compile.splitMixedText = function(str) {}
Lyte.Compile.syntaxCheck = function(value) {}


Lyte.Component.addLyteEventListener = function(element, eventName, func, context){}
Lyte.Component.appendChild = function(outlet, component){}
Lyte.Component.insertAfter = function(){}
Lyte.Component.insertBefore = function(referenceNode, newNode, parentNode){}
Lyte.Component.register = function(){}
Lyte.Component.registerCustomPropHandler = function(propName){}
Lyte.Component.registerHelper = function(){}
Lyte.Component.removeLyteEventListener = function(element, listenerId){}
Lyte.Component.render = function(componentName, data, outlet){}
Lyte.Component.replaceWith = function(){}
Lyte.Component.set = function(){}
Lyte.Component.shouldIgnoreDisconnect = function(){}
Lyte.Component.throwEvent = function(eventName){}
Lyte.Component.unregisterComponent = function(componentName){}


Lyte.Mixin.exists = function(name){}
Lyte.Mixin.register = function(name, mixin){}


Lyte.Router.addRoutes = function(map){}
Lyte.Router.afterRouteTransition = function(){}
Lyte.Router.beforeRouteTransition = function(){}
Lyte.Router.beforeScroll = function(){}
Lyte.Router.checkIfSameRoute = function(transInfo1, transInfo2){}
Lyte.Router.configureDefaults = function(options){}
Lyte.Router.configureRoutes = function(map){}
Lyte.Router.getRoute = function(url){}
Lyte.Router.getRouteInstance = function(routeName, t){}
Lyte.Router.getURL = function(matched){}
Lyte.Router.registerRoute = function(dir, fns, options){}
Lyte.Router.replaceWith = function(){}
Lyte.Router.transitionTo = function(){}
Lyte.Router.history = {
	index: 50,
	fromHistory:
	false,
	initial: false
};


Lyte.Security.addGlobalObject = function(instanceObj, additionalObj){}
Lyte.Security.createSanitizer = function(obb){}
Lyte.Security.escape = function(string){}
Lyte.Security.removeGlobalObject = function(instanceObj, additionalObj){}
Lyte.Security._ourSanitizerInstance_ = function(t){}


Lyte.patterns.alphaNumeric = /([a-zA-Z0-9])+/;
Lyte.patterns.alphabetsOnly = /([a-zA-Z])+/;
Lyte.patterns.ampm = /^(AM|PM|am|pm)$/;
Lyte.patterns.boolean = /^(true|false|TRUE|FALSE)$/;
Lyte.patterns.email = /^([A-Za-z0-9._%\-'+/]+@[A-Za-z0-9.-]+\.[a-zA-Z]{2,22})$/;
Lyte.patterns.hour = /^(0?[0-9]|1[0-9]|2[0-4])$/;
Lyte.patterns.minute = /^(0?[0-9]|[1-5][0-9]|60)$/;
Lyte.patterns.numeric = /([0-9])+/;
Lyte.patterns.phoneNo = /^[0-9a-zA-Z+.()\-;\s]+$/;
Lyte.patterns.url = /(^(ht|f)tp(s?):\/\/[0-9a-zA-Z][-.\w]*(:[0-9])*(\/?)([a-zA-Z0-9\-.?,:'/\\+=&amp;%$#_[\]@!()*;~]*)?$)/;


Lyte.addEventListener = function(eventName, func){}
Lyte.arrayUtils = function(){}
Lyte.attr = function(type, opts){}
Lyte.belongsTo = function(type, opts){}
Lyte.checkProperty = function(property, dataVal, key, fieldVal, record, type){}
Lyte.createCustomElement = function(customElementName, definition){}
Lyte.deepCopyObject = function(obj){}
Lyte.defineRelation = function(name, type, opts){}
Lyte.error = function(){}
Lyte.getErrorMessage = function(code){}
Lyte.getProperty = function(key, fromStore, properties){}
Lyte.hasMany = function(name, opts){}
Lyte.injectResources = function(files, every, completed){}
Lyte.isComponent = function(object){}
Lyte.isRecord = function(object){}
Lyte.log = function(text, src, color){}
Lyte.objectUtils = function(){}
Lyte.registerDataType = function(fieldTypeName, properties){}
Lyte.registerErrorCodes = function(object){}
Lyte.registerPattern = function(patternName, pattern){}
Lyte.registerValidator = function(customValidatorName, func){}
Lyte.removeEventListener = function(id){}
Lyte.removeFromCache = function(arr){}
Lyte.resolvePromises = function(promises){}
Lyte.time = function(fn){}
Lyte.triggerEvent = function(){}
Lyte.validate = function(object, key, value, component){}
Lyte.warn = function(){}


Lyte.debug = false;
Lyte.performance = false;
Lyte.version = "";
Lyte.types = ["string", "object", "number", "boolean", "array"];

var store = {};
store.adapter = {};
store.adapter.$ = {}
store.serializer = {}
store.serializer.$ = {}


store.adapter.$.buildURL = function(type, method, modelName, key, snapshot, queryParams, actionName, customData){}
store.adapter.$.callGeneric = function(type, modelName, data, record, customData, queryParams, key, url){}
store.adapter.$.checkResponse = function(data, model, response, pK, partialObj){}
store.adapter.$.compareObjects = function(obj1, obj2, qP){}
store.adapter.$.compareReqObjects = function(obj1, obj2){}
store.adapter.$.constructBatch = function(modelName, type, key, urlObj){}
store.adapter.$.create = function(modelName, data, isSingleRecord, customData, qP){}
store.adapter.$.del = function(modelName, data, isSingleRecord, destroy, customData, qP){}
store.adapter.$.findParseRequestPromise = function(payload, modelName, type, key, urlObj, xhr, batchIndex, batch, resolve, opts){}
store.adapter.$.genericResponse = function(resp, modelName, type, data, urlObj, xhr, partialObj, customData){}
store.adapter.$.get = function(type, modelName, key, queryParams, cacheQuery, customData, cacheData){}
store.adapter.$.getFailure = function(modelName, type, key, urlObj, xhr, resolve, reject, opts, content, code){}
store.adapter.$.getFromAdapter = function(adapter, key){}
store.adapter.$.getFromIDB = function(idbObj, modelName, type, queryParams, key, urlObj, xhr){}
store.adapter.$.getResponse = function(resp, modelName, type, key, urlObj, xhr, customData, opts){}
store.adapter.$.getSuccess = function(modelName, type, key, urlObj, xhr, resolve, reject, response, resObj, from, opts){}
store.adapter.$.handleAction = function(actionName, model, record, customData, qP, method, data){}
store.adapter.$.handleBatchPromise = function(obj){}
store.adapter.$.handleFailure = function(modelName, type, xhr, data, urlObj, resolve, respObj, partialObj, reject, key, customData, code){}
store.adapter.$.handleParseResponsePromise = function(response, modelName, type, key, urlObj, xhr, partialObj, batchIndex, batch, resolve, reject, opts){}
store.adapter.$.handleRequest = function(urlObj, modelName, data, type, changedData, customData, partialObj, key, actionName){}
store.adapter.$.handleResponse = function(data, response, model, type, partialObj){}
store.adapter.$.handleSuccess = function(modelName, type, xhr, data, urlObj, resolve, resp, respObj, partialObj, reject, key, customData){}
store.adapter.$.mergeNewDataKeys = function(partialObj, data, response){}
store.adapter.$.otherParseRequestPromise = function(resp, modelName, type, data, urlObj, xhr, partialObj, batchIndex, batch, resolve, reject, customData){}
store.adapter.$.put = function(modelName, data, record, isSingleRecord, customData, qP){}
store.adapter.$.removePartialKeys = function(data, model, pK){}
store.adapter.$.requestHandle = function(modelName, type, key, urlObj, operation, record){}
store.adapter.$.sendXHR = function(modelName, type, key, urlObj, resolve, reject, xhrType, data, customData){}
store.adapter.$.sendingData = function(modelName, data, urlObj, type, customData, snapshot){}
store.adapter.$.serializeRecords = function(modelName, data, records, urlObj){}
store.adapter.$.serializeSingleRecord = function(model_name, data, record, urlObj, fields){}
store.adapter.$.updateIDB = function(modelName, type, data){}
store.adapter.$.updateRelationsIDB = function(item, relations){}
store.addEventListener = function(type, func){}
store.addField = function(modelName, key, type, options, ignoreValidation){}
store.batch = function(func){}
store.clearCachedQuery = function(modelName, key, queryParams){}
store.create = function(modelName, data, customData, qP){}
store.createRecord = function(modelName, opts, withoutValidation){}
store.delete = function(modelName, key, customData, qP){}
store.deleteMany = function(modelName, keys){}
store.deleteRecord = function(modelName, key){}
store.emit = function(type, args){}
store.findAll = function(modelName, queryParams, cacheQuery, cacheData, customData){}
store.findRecord = function(modelName, key, queryParams, cacheQuery, cacheData, customData){}
store.getErrorMessage = function(code){}
store.getPrimaryKey = function(modelName){}
store.modelFor = function(name){}
store.peekAll = function(modelName){}
store.peekRecord = function(modelName, pKey){}
store.pushPayload = function(modelName, data, deserialize){}
store.registerAdapter = function(adapterName, opts, parent){}
store.registerModel = function(name, fields, options){}
store.registerSerializer = function(serializerName, opts, parent){}
store.removeEventListener = function(id){}
store.rollBack = function(modelName){}
store.serializer.$.buildJSON = function(modelName, type, payLoad, id, status, urlObj, customData){}
store.serializer.$.normalize = function(modelName, type, payLoad, id, status, headers, customData, opts){}
store.serializer.$.normalizeResponse = function(modelName, type, payLoad, id, status, urlObj, customData, opts){}
store.setErrorMessages = function(obj){}
store.triggerAction = function(modelName, actionName, customData, qP, method, data){}
store.triggerUpdate = function(modelName, pkVal, keys, qP, customData){}
store.unloadAll = function(modelName){}
store.unloadRecord = function(modelName, key){}
store.unregisterAdapter = function(data){}
store.unregisterModel = function(){}
store.unregisterSerializer = function(){}
store.update = function(modelName, customData, qP){}
