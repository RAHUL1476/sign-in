const cssSelectorParser = (function () {
	const regExps = [];
	let states = {};
	const ignoreFunction = function () { }
	const createReturningFunction = function (value) {
		return function () {
			return value;
		};
	}
	const setState = function (state) {
		states = compileStates(state);
	}
	const compileStates = function (states) {
		var result = {};
		Object.keys(states).forEach(function (name) {
			result[name] = compileState(states[name], states);
		});
		return result;
	}
	const compileState = function (state, states) {
		processState(state);
		let total = regExps.map(function (r) {
			return "(" + r.regExp + ")";
		}).join("|");
		let actions = [];
		let pos = 1;
		regExps.forEach(function (r) {
			var fn;
			if (typeof r.value === "function") {
				fn = r.value;
			} else if (typeof r.value === "string") {
				fn = createReturningFunction(r.value);
			} else {
				fn = ignoreFunction;
			}
			actions.push({
				name: r.regExp,
				fn: fn,
				pos: pos,
				pos2: pos + r.groups + 1,
				groups: r.groups
			});
			pos += r.groups + 1;
		});
		return {
			regExp: new RegExp(total, "g"),
			actions: actions
		};
	}
	const iterator = function (str, value) {
		regExps.push({
			groups: getGroupCount(str),
			regExp: str,
			value: value
		});
	}
	const processState = function (statePart) {
		if (Array.isArray(statePart)) {
			statePart.forEach(processState);
		} else if (typeof statePart === "object") {
			Object.keys(statePart).forEach(function (key) {
				iterator(key, statePart[key]);
			});
		} else if (typeof statePart === "string") {
			processState(states[statePart]);
		} else {
			throw new Error("Unexpected 'state' format");
		}
	}
	const getGroupCount = function (regExpStr) {
		return new RegExp("(" + regExpStr + ")|^$").exec("").length - 2;
	}
	const parse = function (initialState, string, context) {
		context = context || {};
		var currentState = initialState;
		var currentIndex = 0;
		for (; ;) {
			var state = states[currentState];
			var regExp = state.regExp;
			regExp.lastIndex = currentIndex;

			var match = regExp.exec(string);
			if (!match) {
				return context;
			}
			var actions = state.actions;
			currentIndex = state.regExp.lastIndex;
			for (var i = 0; i < actions.length; i++) {
				var action = actions[i];
				if (match[action.pos]) {
					var ret = action.fn.apply(context, Array.prototype.slice.call(match, action.pos, action.pos2).concat([state.regExp.lastIndex - match[0].length, match[0].length]));
					if (ret) {
						if (!(ret in states)) {
							throw new Error("State '" + ret + "' doesn't exist");
						}
						currentState = ret;
					}
					break;
				}
			}
		}
	}
	return {
		parse: parse,
		setState: setState
	};
}());
export default cssSelectorParser;