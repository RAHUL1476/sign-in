var productionScope = process.env.npm_config_production;
var fs = require("fs");
var packageJSONContent = JSON.parse(fs.readFileSync("package.json",'utf-8'))
if(!productionScope) {
    const {spawn} = require("child_process");
    var developmentSetUpPackage = packageJSONContent.developmentSetUpPackage;
    var array =[];
    for(var key in developmentSetUpPackage) {
        array.push(key+'@'+developmentSetUpPackage[key]);
    }
    if(array.length){
        var args = [
            'install',
            '--registry',
            'http://integ-docker:4873',
            '--legacy-bundling'
        ].concat(array);
        const child = spawn(process.platform == "win32" ? 'npm.cmd' : 'npm',args);
        console.log("Installing the development setup package.....");
        child.stdout.on('data',function(str){
            console.log(str.toString());
        });
        child.stderr.on('data',function(str){
            console.log(str.toString());
        });
        child.on('close',code => {
            packageJSONContent.productionScope = false;
            fs.writeFileSync("package.json",JSON.stringify(packageJSONContent,null,' '));
            if(code !== 0) {
                console.log("Package installation failed");
            } else {
                console.log("Package installation success");
            }
        });   
    }           
} else {
    var removedFilesList = ["lib/utilities/client/sharedWorker.js","lib/utilities/client/development.js","lib/utilities/client/debug","webSocket/","lib/commands/serve.js"]
    removedFilesList.forEach(function(file) {
        fs.rmdirSync(file,{recursive:true});
    });
    packageJSONContent.productionScope = true;
    fs.writeFileSync("package.json",JSON.stringify(packageJSONContent,null,' '));
}