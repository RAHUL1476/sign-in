require = global.require;
const puppeteer = require('puppeteer');
const fileManipulation = require("@zoho/lyte-cli-utils").fileManipulation;
const path = require('path');
module.exports = function(options,callback,modification) {
    var systemLog = options.log.system;
    let wsEndpoint = options.browserWSEndpoint;
    let puppeteerExecPath = path.join(process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'],".lyte",puppeteer._preferredRevision);
    let errorCallback = function(err) {
        fileManipulation.appendSync(path.join(options.cliRoot,"puppeteer.log"),err.message);
        if(err.message.indexOf("ENOENT") != -1) {
            fileManipulation.removeSync(puppeteerExecPath,true);
        }
        callback(err);
    };
    function callPuppeteer() {
        let browserConnectFn = function() {             
            try {
                systemLog({msg :"browser Endpoint "+wsEndpoint,timestamp: new Date().getTime(),type:"INFO"});
                let createNewPage = function(context) {
                    systemLog({msg :"Browser launched",timestamp: new Date().getTime(),type:"INFO"});
                    context.newPage().then(function(page) {
                        options.page = page;
                        systemLog({msg :"page opened",timestamp: new Date().getTime(),type:"INFO"});   
                        callback();
                    }).catch(function(err) {
                        errorCallback(err);
                    });
                };
                puppeteer.connect({browserWSEndpoint : wsEndpoint}).then(function(browser){
                    options.chromiumBrowser = browser;
                    if(modification) {
                        options.context = browser;
                        createNewPage(browser);
                    } else {
                        browser.createIncognitoBrowserContext().then(function(context){                                                                       
                            options.context = context;
                            createNewPage(context);
                        }).catch(function(e){
                            errorCallback(e);
                        });
                    }
                }).catch(function(e){             
                    if(e.message.indexOf("ECONNREFUSED") != -1) {                                
                        options.browserWSEndpoint = wsEndpoint = undefined;                                 
                        callPuppeteer();
                    } else {
                        errorCallback(e);
                    }
                });                           
            } catch(e){
                callback(e);
            }                            
        };
        if(!wsEndpoint) { 
            systemLog({msg :"Creating new browser instance ",timestamp: new Date().getTime(),type:"INFO"});
            var opt = {};
            var os = process.platform;
                opt.args = ["--proxy-server='*'", '--proxy-bypass-list=*','--lang=en-GB'];
            if(os == "linux") {
                opt.args = [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-gpu',
                    '--disable-dev-shm-usage',
                    '--no-first-run',
                    '--no-zygote'
                ];
            }
            opt.userDataDir ='';
            opt.headless = !options.debug;
            opt.ignoreHTTPSErrors = true;  
            let puppeteerPath = path.join(options.cliRoot,"puppeteerPath.txt");
            fileManipulation.access(puppeteerPath,function(err) {
                if(err) {
                    callback(new Error("Lyte-cli not installed properly.Reinstall the lyte-cli"));
                } else {
                    fileManipulation.read(puppeteerPath,'utf-8',function(err,data) {
                        opt.executablePath = data;
                        puppeteer.launch(opt).then(function(browser){
                            systemLog({msg :"New browser instance launched",timestamp: new Date().getTime(),type:"INFO"});
                            options.browserWSEndpoint = wsEndpoint = browser.wsEndpoint();
                            browserConnectFn();
                        }).catch(function(err){
                            errorCallback(err);
                        });
                    });
                }
            });
        } else {
            browserConnectFn();
        }
    }
    try {
        callPuppeteer();   
    } catch(e){
        callback(e);
    }
};
