require = global.require;
const http = require('http'),
	fileManipulation = require("@zoho/lyte-cli-utils").fileManipulation,
	path = require("path"),
	mime = require('mime-types'),
	getPort = require('get-port'),
	launchChromiumBrowser =  require("../../lib/utilities/launchChromiumBrowser");
module.exports = function processTemplate(options,json,singleFile,callback) {	
	let chromiumServer;
	let launchBrowser = function(options,callback,modification) {
		try {
			let page;
			let systemLog = options.log.system;
			let callGoto = function(err) {
				if(err) {
					callback(err);
				} else {
					page = options.page;
					getPort().then(function(port) { 
						chromiumServer.listen(port);
						options.chromiumPort = port;
						page.goto('http://localhost:'+port+"/",{ 
							timeout: 0 
						});
					}).catch(function(e) {
						callback(e);
					});
					page.on("error",function(err) {
						systemLog({msg : JSON.stringify(err),_zl_timestamp: new Date().getTime(),type:"SEVERE",throwable : err.stack});
					});
					page.on('console',function(msg) {
						systemLog({msg :msg.text(),_zl_timestamp: new Date().getTime(),type:"INFO"});
					});	
				}
			};			
			launchChromiumBrowser(options,callGoto,modification);
		} catch(e) {
			callback(e);
		}
	};
	options.time("clientProcessing");
	let D = options._appOutputFolder;
	let stringProcessing =`let validateComponentDataName=function(e){var t=e.match(/^(([a-z_])([a-z0-9_])*((\d)|([A-Z][a-z0-9_]+))*([A-Z])?)$/g);return!(!t||t[0]!=e)},returnObservedAttributes=function(e){let t=!0,r=[];var n=e.body.body,o=n.length;let s=[];for(i=0;t&&i<o;i++)if("ReturnStatement"==n[i].type){var a=n[i].argument;if(a&&"ObjectExpression"==a.type){for(var p=a.properties,u=0;u<p.length;u++){var c=p[u].key,l=c.value||c.name,m=c.loc.start;if("errors"==l)throw{type:"error",message:"errors is the reserved key word.In Lyte, it is used to set the errors of the component's data.",lineNumber:m.line+1,column:m.column};(result=validateComponentDataName(l))||s.push(l),r.push(l)}t=!1}}return{observedAttributes:r,warnings:s}},catchFn=function(e,t){try{response[t]=response[t]||{};let s,a,i,p,u,c=Espree.parse(e,{ecmaVersion:9,sourceType:"module",loc:!0}).body[0].expression.callee.body.body,l=c.length,m=!0,y=[];for(let e=0;m&&e<l;e++)if((s=c[e].expression)&&s.callee&&(a=s.callee.object)&&("LyteComponent"==a.name||a.object&&"Lyte"==a.object.name&&"Component"==a.property.name)){let e=(i=s.arguments).length;for(n=0;m&&n<e;n++)if("ObjectExpression"==i[n].type)for(properties=i[n].properties,o=0;m&&o<properties.length;o++){var r=properties[o];if("data"==r.key.name){m=!1,"FunctionExpression"==r.value.type&&(y=(p=returnObservedAttributes(r.value)).observedAttributes,response[t]._observedAttributes=y||[],(u=p.warnings).length&&(response[t].jsWarnings=u.toString()))}}}}catch(e){response[t].jsError={message:e.message,stack:e.stack,line:e.lineNumber-2,column:e.column}}},emptyFn=function(){};Function.prototype.on=emptyFn,Function.prototype.observes=function(){return{type:"observer",value:this,properties:arguments,on:Function.prototype.on}},Function.prototype.computed=emptyFn;let Lyte={registeredComponents:{},types:["string","object","number","boolean","array"],componentCopyRule:function(e){try{let t=e.body[0].expression;return"FunctionExpression"==t.type?returnObservedAttributes(t):{}}catch(e){throw e}},attr:function(e,t){},Component:{register:function(){var e,t=[],r=arguments[0],n=[];response[r]=response[r]||{};try{var o,s;if((e=arguments[1].data)&&(o=e()))for(s in o){if("errors"==s)throw"errors";t.push(s),validateComponentDataName(s)||n.push(s)}n.length&&(response[r].jsWarnings=n.toString()),response[r]._observedAttributes=t}catch(e){var a="("+arguments[1].data.toString()+")";try{t=Lyte.componentCopyRule(Espree.parse(a,{ecmaVersion:9,loc:!0})),response[r]._observedAttributes=t.observedAttributes,(n=t.warnings).length&&(response[r].jsWarnings=n.toString())}catch(t){response[r].jsError={message:t.message,stack:t.stack,line:t.lineNumber,column:t.column}}}}}};`;
	let production = options.production || false;
	let userLog = options.log.user;
	let systemLog = options.log.system;
	let myVar;
	let modification;
	let ide = options.ide || false;
	let isDebug = options.debug || false,
		isWidget = options.widget || false,
		useStrict = options.useStrict || false,
		clientFilePath = path.join(options.cliRoot,'lib','utilities','client'),
		array = {},
		openTabString = production ? '' : "<script>openTabs()</script>";
	if(isDebug) {
		stringProcessing = fileManipulation.readSync(path.join(clientFilePath,"debug","returnObservedAttributes.js"),'utf-8');
		array = [path.join("debug","espressExpHandler.js"),path.join("debug",'index.js'),path.join("debug",'windowOpener.js'),'mustache-worker.js','security_min.js'];
	} else {
		array = ["espressExpHandler-min.js","index-min.js",'windowOpener-min.js','mustache-worker.js','security_min.js'];
	}
	let lengthOfTheFileToRead = 7;
	array = production ? array.concat(["production.js","sharedproduction.js"]) : array.concat(['development.js',"sharedWorker.js"]);
	let filePath;
	let readCount = 0;
	for(let index = 0;index < lengthOfTheFileToRead;index++) {
		filePath = path.join(clientFilePath,array[index]);
		fileManipulation.read(filePath,'utf-8',function(err,data) {
			array[index] = data;
			if(++readCount == lengthOfTheFileToRead) {
				let mustacheWorkerContent = array[3],
					developmentContent = array[5],
					espreeExpHandler = array[0],
					indexContent = array[1],
					windowOpenerFileContent = array[2],
					securityContent = array[4];
				let html = json.html;
				let assignObj = {};
				if(singleFile) {
					let singleFileObjName = path.parse(singleFile).name;
					let singleFileTemplate = {};
					singleFileTemplate[singleFileObjName] = html[singleFileObjName];
					assignObj.compLen = Object.keys(singleFileTemplate).length;
					assignObj.templates = JSON.stringify(singleFileTemplate);
					modification = true;				
				} else {
					assignObj.compLen = Object.keys(html).length;
					assignObj.templates = JSON.stringify(html);
				}
				assignObj.js = json.js;
				assignObj.callbackFn = callback; 
				
				chromiumServer =  http.createServer(function(request,response) {
					let url = request.url;
					let obj = assignObj;
					if(request.method === "GET") {	
						if(url == '/get') {
							response.write(obj.templates);
							response.end();
						} else if(url == '/') {						
							response.writeHead(200,{'Content-Type':"text/html; charset=UTF-8","Connection":"keep-alive"});
							response.write('<!DOCTYPE html>\n<html>\n<head>\n');
							response.write('<script type="text/javascript">var debug='+isDebug+";\nvar production="+production+";\nvar compLen="+obj.compLen+";\nvar widget="+isWidget+";\nvar useStrict="+useStrict+";\nvar ide="+ide+";\nvar port="+options.chromiumPort+";\n");
							response.write(espreeExpHandler+'\n');
							response.write(developmentContent+'\n');
							!production && response.write(windowOpenerFileContent+'\n');
							response.write(indexContent+'\n');			     	
							response.write(securityContent+"</script>");
							response.write('\n<link rel="shortcut icon" href="data:image/x-icon;," type="image/x-icon"></head>\n<body><b>Loading Process</b>'+openTabString+'</body>\n</html>');			            			
							response.end();					
						} else if(url.substring(1) >=0 && url.substring(1)<=9) {				    	
							response.write('<!DOCTYPE html>\n<html>\n<head>\n');
							response.write('<script type="text/javascript">var debug='+isDebug+";\nvar production="+production+";\nvar compLen="+obj.compLen+";\nvar widget="+isWidget+";\nvar useStrict="+useStrict+";\nvar ide="+ide+";\nvar port="+options.chromiumPort+";\n");
							response.write(espreeExpHandler+"\n");
							response.write(developmentContent+"\n");
							response.write(indexContent+"\n");
							response.write(securityContent+"</script>");
							response.write('\n<link rel="shortcut icon" href="data:image/x-icon;," type="image/x-icon"></head>\n<body><b>Building Process</b></body>\n</html>');				    	
							response.end();
						} else if(url.indexOf("worker") !== -1) { 
							response.write(mustacheWorkerContent);		
							response.end();		    	
						} else if(url.indexOf("sharedWorker") !== -1) { 
							response.write(espreeExpHandler);	
							response.write('\nlet response = {};\n');
							response.write(stringProcessing);
							response.write("\n"+obj.js+"\n");
							response.write("var debug="+isDebug+";\nvar widget="+isWidget+";\nvar production="+production+";\n");							
							response.write(array[6]);
							response.end();		    	
						} else if(url.indexOf("sharedproduction") !== -1) { 
							response.write(espreeExpHandler);	
							response.write('\nlet response = {};\n');
							response.write(stringProcessing);
							response.write("\n"+obj.js+"\n");
							response.write("var debug="+isDebug+";\nvar widget="+isWidget+";\nvar production="+production+";\n");							
							response.write(array[6]);
							response.end();		    	
						} else {
							fileManipulation.read(path.join(D,decodeURIComponent(url)),(function(err,data){
								if(err){
									response.writeHead(404,{'Content-Type': mime.lookup(url)});
								} else {
									response.writeHead(200, {'Content-Type': 'text/html; charset=UTF-8'});
									response.write(data);	
								}
								response.end();
							}).bind(url));
						}						
					} else if(request.method == "POST") {
						options.gotthePostMessage = true;
						systemLog({msg :"Post method request get caught with url"+url,timestamp: new Date().getTime(),type:"INFO"});
						if(url=='/warning'){
							let componentName = '';
							request.on('data', function (chunk) {
								componentName += chunk;
								userLog({msg:componentName+" took more than 10s for dynamic nodes",color:"yellow"});
							});
						} else {
							let str = '';
							request.on('data',function (chunk) {
								str += chunk;							
							});												
							request.on('end',function() {
								options.time("endCall");
								clearTimeout(myVar);
								let resp;
								systemLog({msg :"Time taken for end call back be "+options.time("clientProcessing"),timestamp: new Date().getTime(),type:"INFO"});		
								let returnCallObj = function() {
									if(resp.error) {
										obj.callbackFn(new Error(resp.error));
									} else {
										systemLog({msg:"Callback function called "+options.time("endCall")+Object.keys(resp),timestamp: new Date().getTime(),type:"INFO"});
										obj.callbackFn(null,resp);								
									}
								};	
								try {
									resp = JSON.parse(str);	
									if(!isDebug) {
										chromiumServer.close();
										if(!modification) {
											options.context.close();
										}
									}
									returnCallObj(resp);										
									response.end();
								} catch(e) {
									obj.callbackFn(e);								
									response.end();								
								}
							});
						}					
					}			
				});		
					
				chromiumServer.on("error",function(err) {
					systemLog({msg :"http error"+err,timestamp: new Date().getTime(),type:"INFO"});									
					assignObj.callbackFn(new Error(err));
				});	
				myVar = setTimeout(function() {
					clearTimeout(myVar);
					if(!options.gotthePostMessage){
						assignObj.callbackFn(new Error("Lyte build struck at dynamic nodes.Restart the build"));
					}
				},600000);
				launchBrowser(options,assignObj.callbackFn,modification);	
			}
		});
	}			
};



