let componentNames;
let templates;
let postMessage;
let startTime = {};
let time = new Date().getTime();
let totalComponent;
let processedComponentCount = 0;
self.addEventListener("connect", function(e) { 
    var port = e.ports[0];
    port.addEventListener("message", function(e) {   
        var data = e.data;
        var msg = data.msg;
        var componentName =  data.componentName;
        var endTime = data.endTime;
        var result = data.finalObj;
        var portNo = data.portNo;      
        if(msg == "tabfree") {
            // if(debug) {
                console.log("totalComponent"+totalComponent);
                console.log(Object.keys(response));
                console.log("Tab free after processing the component "+componentName+" "+"from tab no"+e.data.tabno);
                console.log("Ending time of componentName "+componentName+" "+(endTime - startTime[componentName])/1000+' s');            
            // }
            processedComponentCount++;
            response[componentName] = response[componentName] ? Object.assign(response[componentName],result) : result;
            response[componentName]._observedAttributes = Lyte.registeredComponents[componentName] || response[componentName]._observedAttributes || [];
            if(totalComponent == processedComponentCount || totalComponent == 0) {           
                if(postMessage) {  
                    postMessage = false;                                     
                    console.log("Time to get all the response "+(new Date().getTime()-time)/1000+'s');
                    var xhr = new XMLHttpRequest();
                    xhr.open("POST",'http://localhost:'+portNo+"/post", true);
                    xhr.upload.onloadstart = function() {
                        console.log("Just started");
                    };
                    xhr.upload.onerror = function() {
                        console.log("Error status "+xhr.status);
                    };
                    xhr.upload.onprogress = function(event) {
                        console.log(`Uploaded ${event.loaded} of ${event.total} bytes`);
                        if(event.loaded == event.total) {
                            console.log("Total time "+(new Date().getTime()-time)/1000+'s');
                        }
                    };
                    xhr.onloadend = function() {
                        console.log("end call");
                        if(xhr.status == 200) {
                            console.log("Total time for upload finished"+(new Date().getTime()-time)/1000+'s');
                        } else {
                            console.log("Upload Failed : "+this.status+" \nTotal time "+(new Date().getTime()-time)/1000+'s');
                        }
                    }
                    xhr.setRequestHeader("Content-Type","application/text");                   
                    xhr.send(JSON.stringify(response,null," "));
                    template = undefined;  
                    response = {};                                            
                }
                return;
            } else {
                postMessageToIndexPage(); 
            }
                      
        } else if(msg == "firstTime") {    
            postMessage = true;    
            var tab = portNo;  
            var xhr = new XMLHttpRequest();
            xhr.open("GET", 'http://localhost:'+tab+'/get',true);
            xhr.send(); 
            xhr.onreadystatechange = function() {
                if(this.readyState === 4 && this.status === 200) {                                    
                    templates = JSON.parse(xhr.response);
                    componentNames = Object.keys(templates);
                    totalComponent = componentNames.length;
                    postMessageToIndexPage();
                }
            };
        } else {
            postMessageToIndexPage();
        }
        function postMessageToIndexPage() {
            if(componentNames.length) {
                key = componentNames.pop();
                startTime[key] = new Date().getTime();
                port.postMessage({msg : "processComponents",componentName : key ,content: templates[key],startTime : startTime[key]});   
            } else {    
                port.postMessage({msg : "no components"});
            }
        }                             
    }, false);
    port.start(); 
}, false); 
