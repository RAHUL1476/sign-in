//var arrayCheck = []
onmessage = function(ev) {
    var data = ev.data;
    if(!data.debug) {
        console.warn = console.log = function() {}    
    }
    var retVal;
    if(ev.data.func === "getMustache") {
        retVal = getMustache.apply(undefined, ev.data.params);
    } else {
        retVal = getHelper.apply(undefined, ev.data.params);
    }
    // arrayCheck.push(retVal);
    // if(!retVal || typeof retVal === "string") {
    //     retVal = {data : retVal};
    // }
    // retVal.something = arrayCheck.length;
    postMessage(retVal);
}

    function getMustache(value){
        value=(value && typeof value === "string") ? value.trim() : value;
        if(/^{{(?=[\s]*[\w-_\()]+)/.test(value)){
            let arr = value.match(/{{[a-zA-Z0-9_.\[\]\(\)]*(?![\\])}}/g);
            if(arr && arr.length > 1){
                console.log("length>1",value)
                return undefined;
            }
            console.log(value);
            let syn =syntaxCheckWorker(value);
            if(!syn.bool){
                console.log("syntax error",syn)
                return {bool:false,err:syn.err};
            }
            if(!(/{{[^}]*?(?:(?:('|")[^\1]*?\1)[^}]*?)*}}$/.test(value))){
                return undefined;
            }
            let dynamic = value.match(/[\w!@#\$%\^\&*\)\(+=.,_-]+[\s]*[(]{0,1}(?:"([^"]|\\")*?"|'([^']|\\')*?'|[\w\s!@#\$%\^\&*\)\(\[\]+=.,_-]*?)*?[)]{0,1}[\s]*(?=}})/g); // /* */
            if(dynamic && dynamic.length > 1){
                return undefined;
            }
            else{
                dynamic = (dynamic) ? dynamic[0].trim(): dynamic;                
            }
//            let dynamic = /[\w!@#\$%\^\&*\)\(+=.,_-]+(?:"([^"]|\\")*?"|'([^']|\\')*?'|[\w\s!@#\$%\^\&*\)\(\[\]+=.,_-]*?)*?(?=}}$)/.exec(value);
            console.log("dynamic value before returning ", dynamic);
            return dynamic;
        }
        return undefined;
    }

    function syntaxCheckWorker(value){ //' " " () {{}}
        var stack = [],lastAdded,stackBraces=[],stackBracket=[],openParenthesis=0 ,i=0;
        for(i=0;i<value.length;i++){
            if(value[i] === "'"){
                if(lastAdded === "'" && value[i-1] !== "\\"){
                    stack.pop();
                    lastAdded = undefined;
                }
                else if(!stack.length){
                    lastAdded = value[i];
                    stack.push(lastAdded);
                }
            }
            else if(value[i] === "\""){
                if(lastAdded === "\"" && value[i-1] !== "\\"){
                    stack.pop();
                    lastAdded = undefined;
                }
                else if(!stack.length){
                    lastAdded = value[i];
                    stack.push(lastAdded);
                }
            }
            else if(value[i] === "{" && !lastAdded) {
                stackBraces.push("{");
                openParenthesis ++;
            }
            else if(value[i] === "}" && !lastAdded) {
                if(stackBraces.length){
                    stackBraces.pop();
                    openParenthesis --;
                }
                else{
                    return {bool:false,err:"unmatched '}' brackets\n"+'\x1b[33m'+value.substr(0,i-2)+'\x1b[4m'+value.substr(i-2,value.length)+'\x1b[0m'+'\x1b[31m'};
                }
            }
            else if(value[i] === "(" && !lastAdded) {
                stackBracket.push("(");
            }
            else if(value[i] === ")" && !lastAdded) {
                if(stackBracket.length){
                     stackBracket.pop();
                }
                else{
                    return {bool:false,err:"unmatched ')' brackets\n"+'\x1b[33m'+value.substr(0,i-1)+'\x1b[4m'+value.substr(i-1,value.length)+'\x1b[0m'+'\x1b[31m'};
                }
            }
            else if(stackBraces.length > 2){
                return {bool:false,err:"'{{' not allowed inside another '{{' brackets\n"+'\x1b[33m'+value.substr(0,i-2)+'\x1b[4m'+value.substr(i-2,value.length)+'\x1b[0m'+'\x1b[31m'};
            }
            
        }
        if(stack.length){
            return {bool:false,err:"unmatched Quotes"};
        }
        
        else if(stackBraces.length){
            return {bool:false,err:"unmatched '{' braces"};
        }
        else if(stackBracket.length){
            return {bool:false,err:"unmatched '(' bracket"};
        }
        else if(openParenthesis>0){
            return {bool:false,err:"unmatched '(' bracket"};
        }
        return {bool:true,err:null};
    }

    function getHelper(dynamicValue){
        console.log(dynamicValue);
        let helperValue = /\((?:[^\)]*|(?:(?:"(?:[^"\\]|\\.)*?")|(?:'([^'\\]|\\.)*?')|[\w\s!@#$%^&*)([\]+=.,_-]*?)*?)\)$/.exec(dynamicValue);
        if(helperValue){
            return getHelperInfo(dynamicValue,helperValue);
        }
        return undefined;
    }

    function getHelperInfo(dynamicValue, helperValue){
        let helperFunc = {};
        helperFunc.name = dynamicValue.substr(0,helperValue.index).replace(/\s/g,'');
        helperValue = (helperValue) ? helperValue[0].trim() : helperValue;
        let args = getHelperArgs(helperValue.substr(1,helperValue.length-2));
        if(args === false){
            return false;
        }
        helperFunc.args = args;
        return helperFunc;
    }

    function getHelperArgs(str){
        let stack = [], args = [] , from=0;
        let lastPushed; 
        for(let i=0; i<str.length; i++){
            if(!stack.length && str.charAt(i) === ","){
                let toPush = str.substr(from,i-from);
                toPush = toPush.trim();
                if(toPush && toPush.startsWith("\"") && toPush.endsWith("\"")){
                    toPush = toPush.slice(1,-1);
                    toPush = "'" + toPush + "'";
                }
                toPush = getHelperArgValue(toPush);
                args.push(toPush);
                from = i + 1;
            }
            else if(str.charAt(i) === "("){
                if(stack[stack.length - 1] != "'" && stack[stack.length - 1] != "\""){
                    stack.push(str.charAt(i));
                    lastPushed = str.charAt(i);
                }
            }
            else if(str.charAt(i) === ")"){
                if(stack[stack.length-1] === "("){
                    stack.pop();
                }
            }
            else if(str.charAt(i) === "'" && str.charAt(i-1) !== "\\"){
                if(stack[stack.length-1] === "'"){
                    stack.pop();
                }
                else if(stack[stack.length-1] !== "\""){
                    stack.push(str.charAt(i));
                    lastPushed = str.charAt(i);
                }
            }
            else if(str.charAt(i) === "\"" && str.charAt(i-1) !== "\\"){
                if(stack[stack.length-1] === "\""){
                    stack.pop();
//                  str.replaceAt(i, "'");
                }
                else if(stack[stack.length-1] !== "'"){
                    stack.push(str.charAt(i));
                    lastPushed = str.charAt(i);
//                  str.replaceAt(i, "'");
                }
            }
        }
        if(stack.length){
            return false;
        }
        let toPush = str.substr(from,str.length-from);
        toPush = toPush.trim();
        if(toPush && toPush.startsWith("\"") && toPush.endsWith("\"")){
            toPush = toPush.slice(1,-1);
            toPush = "'" + toPush + "'";
        }
        try{
            toPush = getHelperArgValue(toPush);
        }
        catch(err){
            console.log("errr",err);
            return false;
        }
        args.push(toPush);
        return args;
    }

    function getHelperArgValue(argValue) {
        switch(argValue) {
            case "undefined" : 
                return undefined
            case "true" : 
                return true;
            case "false" : 
                return false;
            case "null" : 
                return null;
            case "" : 
                return undefined;
            default :
                if(argValue && argValue.startsWith("'") && argValue.endsWith("'")){
                    return argValue;
                }
                else if(/\([\w\s,')(]*/.test(argValue)) {
                    let arg = getHelper(argValue);
                    if(arg === false){
                        throw new Error(argValue);
                    }
                    return {"type" : "helper" , "value" : arg}
                } else if(!isNaN(argValue)) {
                    return parseInt(argValue);
                } else {
                    return argValue;
                }
        }
    }