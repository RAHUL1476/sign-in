"use strict";
require = global.require;
function newapp(options) {
  /*variable declaration */

  const path = require("path"),
      utils =  require("@zoho/lyte-cli-utils"),    
      fileManipulation = utils.fileManipulation,
      checkForLyte = utils.commonCliUtils.checkForLyte;
      
  let blueprint,
      folderName,
      filePath,
      firstArgs = options.cliArgs[1],
      secondArgs =  options.cliArgs[2],
      userLog = options.log.user;

  if(!firstArgs) {
     userLog({color:'red',msg:'Incorrect syntax\nlyte new'});
     userLog({color:'blue',msg:'Correct syntax\nlyte new appName'});
  } else {
    switch(firstArgs) {
       case "addon":
       case "engine":
       case "widget":
          if(checkForLyte(options,"app")) {
             userLog({color :'red',msg :"Lyte "+firstArgs+" are not allowed to create inside the lyte application",stack: new Error()});
             return;
          } else {
              blueprint = options.blueprintPath || path.join(options.cliRoot,"blueprints","new",firstArgs);
              if(secondArgs) {
                if(secondArgs == "addon" || secondArgs == "widget" || secondArgs == "engines") {
                  userLog({color :"red",msg : "Project name should not be named as "+options.cliArgs[2]});
                  return;
                }
                folderName = options.cliArgs[2];
                filePath = path.join(options.root,folderName);
              } else {
                userLog({color :"red",msg :"Please mention the project name"});
                return;
              }
          }
        break;
      case 'app':
      case "extension":
          blueprint = path.join(options.cliRoot,'blueprints','new',firstArgs);
          if(secondArgs) {
            if(secondArgs == firstArgs) {
              userLog({color :"red",msg :"Project name should not be named as "+firstArgs});
              return;
            }
            folderName = secondArgs;
            filePath = path.join(options.root,folderName);
             
          } else {
            userLog({color :"red",msg :"Please mention the project name"});
            return;
          }
        break;
      default :
          blueprint = path.join(options.cliRoot,'blueprints','new','app');
          folderName = options.cliArgs[1];
          filePath = path.join(options.root,folderName);
    }
    if(fileManipulation.fileExist(filePath)) {
      userLog({color:'red',msg:"Folder named '"+folderName+"' already exists."});      
    } else {
      if(fileManipulation.validateFile(filePath)) {
        userLog({color:'green',msg:'Creating new project named '+folderName+' ...'});
        if(!options.dir){
          fileManipulation.mkdirSync(filePath);
        } else{ 
          filePath = options.root;
        }
        var data = fileManipulation.readdirSync(blueprint);
        if(firstArgs == "widget") {
          options.fileId = secondArgs+"-base-component";
        }
        duplicate(data,blueprint,filePath);         
        userLog({color:'green',msg:'Project created successfully'});
        let folderToCd = folderName
        if(firstArgs == "addon" || firstArgs == "engine")  {
          folderToCd = path.join(folderName,"testApp");
        }
        userLog({color:'blue',msg:"Run the command"})+
        userLog({color :"yellow",msg  : "cd "+folderToCd});
        userLog({msg : "Use"})
        userLog({color :"blue",msg :"\tnpm install"+"\nto install the dependencies"});

      } else {
        userLog({color:"red",msg :"Invalid file path to create an Lyte application"+filePath});
      }
    }
  }
  
  function duplicate(data,blueprint,filePath) {
    var fromPath,
        toPath,
        content,
        fileList;
    data.forEach(function(file){
      fromPath = path.join(blueprint,file);
      if(file.indexOf("__filename__") != -1) {
        file = file.replace(/__filename__/g,folderName+"-base-component");
      }
      toPath = path.join(filePath,file);        
      if(fileManipulation.lstatSync(fromPath).isDirectory()) {          
        fileManipulation.mkdirSync(toPath);
        fileList = fileManipulation.readdirSync(fromPath);
        duplicate(fileList,fromPath,toPath);
      } else {         
        content = fileManipulation.readSync(fromPath,'utf-8');
        if(content.length) {
          content =  content.replace(/\[\[name\]\]/g,folderName).replace(/\[\[id\]\]/g,options.fileId);
        }
        fileManipulation.mkdirSync(path.parse(toPath).dir);
        if(fromPath.indexOf("package.json") != -1) {
          if(options.cliArgs[1] == "widget") {
            content = JSON.parse(content);
            content.service = options.service;
            content = JSON.stringify(content,null,' ');
          }
        }           
        fileManipulation.writeSync(toPath,content);
      }
    });
  }
}

module.exports = newapp;
