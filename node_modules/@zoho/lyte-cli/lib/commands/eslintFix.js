"use strict";
var path = require("path"),
	fileManipulation = require("@zoho/lyte-cli-utils").fileManipulation,
	CLIEngine = require("eslint").CLIEngine;


/*command : 
	lyte fix components/javascript/test-comp.js
*/
function fix(options) {
	return new Promise(function(resolve,reject){
		options.ui.startSpinner({module : "fix",msg : "Fixing the errors in eslint ...."},options);
		if(!options.cliArgs[1]) {
			reject(new Error("Please enter the file path to lint the files"))
		} else {
			var file = path.join(options.root,options.cliArgs[1]);
			var fileObj,result,parsingFile;
			if(fileManipulation.fileExist(file)) {
			if(!fileManipulation.lstat(file).isDirectory()) {
				result = options.ui.prompt("red","Do u want to apply the fix changes in source file .If no changes will be placed in _new file??Yes/No");
				if(result.toUpperCase() == "YES" || result.toUpperCase() == "Y") {
					parsingFile = file;
					runEslint();
				} else {
					fileObj = path.parse(file);
					parsingFile = path.join(fileObj.dir,fileObj.name+'_new'+fileObj.ext);
					fileManipulation.copy(options,
						{
							src : file,
							dist : parsingFile
						},{
							resolve : function() {
							runEslint();
							options.log.user("Eslint fix applied in the file "+path.relative(options.root,parsingFile));
						}
					});
				}
				function runEslint() {
					var eslintRule = new CLIEngine({
						useEslintrc: true,
						fix : true
					});
					var report = eslintRule.executeOnFiles([parsingFile]);
					var formatter = CLIEngine.getFormatter("stylish");
					var message = formatter(report.results);
					CLIEngine.outputFixes(report);
					if(report.errorCount) {								
						reject(new Error(message));
					} else {				
						if(result.toUpperCase() == "YES" || result.toUpperCase() == "Y") {
							options.log.user({msg : message});
						}else {				
							options.log.user({msg : message.replace(fileObj.name+'_new',fileObj.name)});
						}
						options.multispinner.success('fix');
						resolve();
					}
				}
				
				
			} else {
				reject(new Error("Can't apply fix for the entire directory .Fix command will work for single file"))
			}
			} else{
				reject(new Error("File not found "+file));
			}
		}
	}).catch(function(e) {		
		options.multispinner.error('fix');
		options.log.user({color : "red",msg : e});
	});
}
module.exports = fix;
