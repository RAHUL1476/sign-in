'use strict';
function help()	{
  var commands = [{name : 'build', cmd : '<<options>>', desc : ' Builds your app and places it into the output path /dist',
                    subCommands : [{name : '--development (String) (Default : development)'},
                                   {name : '--production (String)'},
                                   {name : '--watch (Boolean) (Default: false)',desc :'Watches file changes and builds.'},
                                   {name : '--outputPath (Path) (Default : dist/)'},
                                   {name : '--debug (Default : false)'}]},
                  
                  {name : 'generate',aliases :'g' ,cmd : '<template for> <name> <options>',desc : ' Generates new template for "component","route","helper","mixin","test","model","adapter","serializer","theme","blueprint"',
                    subCommands : [{name : '-d <folder-name>', desc :'Generates the module file inside the specified folder'}]}, 
                  {name : 'rename',cmd : '<template for> <old name> <new name> <options> ',desc : ' Renames the template created by generate command',
                    subCommands : [{name : '-d <folder-name>', desc :'Renames the module file inside the specified folder'}]},                
                  {name : 'destroy',aliases :'d',cmd : '<template> <name> <options>',desc : ' Destroys code generated by `generate` command.',
                    subCommands : [{name : '-d <folder-name>', desc :'Destroys the module file inside the specified folder'}]},
                  {name : 'new',cmd : '<app name>',desc : ' Creates a new directory and runs "npm install" and "bower install" in it.'},
                  {name : 'serve',cmd :'<<options>>',desc : ' Builds and serves your app, rebuilding on file changes.',
                    subCommands : [{name : '--port (Number) (Default: 3000)', desc : 'To use a port other than 3000'}]},

                  {name : 'replace',cmd : '<pattern>  <replacewith>  <filepath>',desc :' Replaces the pattern with the new string globally'},
                  {name : 'location',desc :' Help to find the directory where the lyte-cli installed',aliases : 'loc'},
                  {name : 'version', aliases :' -v (or) --version' ,desc : ' Outputs lyte-cli version'}];
  console.log("\x1b[0m\x1b[1m%s\x1b[0m",'Available commands in lyte-cli:')
  console.log('Usage: lyte '+"\x1b[0m\x1b[33m%s\x1b[0m",'<command (Default: help)>');
  commands.forEach(function(command) {
    var x = command.cmd ? ((command.name =="build" || command.name=="serve") ? ("\x1b[0m\x1b[36m%s\x1b[0m",command.cmd) : command.cmd):'';
    console.log("\x1b[0m\x1b[1m\x1b[32m%s\x1b[0m",'lyte '+command.name,"\xa0\xa0"+x);
    console.log(command.desc ? command.desc :'');
    if(command.aliases) {
      console.log("\x1b[0m\x1b[1m\x1b[30m%s%s\x1b[0m","\xa0\xa0aliases : ",command.aliases);
    } 
    if(command.subCommands) {
      command.subCommands.forEach(function(subCommand){      
        console.log("\x1b[0m\x1b[36m%s\x1b[0m",subCommand.name,('\xa0'+(subCommand.desc ? subCommand.desc :'')));
        if(subCommand.aliases) {
          console.log("\x1b[0m\x1b[1m\x1b[30m%s%s\x1b[0m","\xa0\xa0aliases : ",subCommand.aliases);
        }        
      })
    }
  });
}
module.exports = help;
