
require = global.require;
const path = require("path"),
    utils = require("@zoho/lyte-cli-utils"),
    exec = require("child_process").exec,
    fileManipulation = utils.fileManipulation,
    checkForLyteApp = utils.commonCliUtils.checkForLyte;
module.exports = function add(options,resolve,reject) {
    let firstArgs = options.cliArgs[1],
        multispinner,
        rootPath = options.root,
        cliPath = options.cliRoot,
        version = options.version,
        commandsObjPath  = path.join(cliPath,"commands.json"),
        commandsObj = JSON.parse(fileManipulation.readSync(commandsObjPath,'utf-8'));
    if(version) {
        toInstall = firstArgs+"@"+version; 
    } else {
        toInstall = firstArgs;
    }
    process.chdir(cliPath);
    options.ui.startSpinner({module:'add',msg: "Adding the extension "+firstArgs+' to cli ...'},options);
    multispinner = options.multispinner.spinners;
    let command =  'npm install '+toInstall+" --registry http://integ-docker:4873"
    if(options.link) {
        command =  'npm link '+toInstall;
    }
    exec(command,function(error,stdout,stderr){
        if(error) {
            process.chdir(rootPath);
            multispinner.add.text = "Adding the extension to cli failed";
            reject(new Error(stderr));
        } else {
            try {
            let extPath = path.join(options.cliRoot,"node_modules",firstArgs);
            fileManipulation.access(extPath,function(err) {
                if(err) {
                    multispinner.add.text = "Extension not added to cli properly";
                    options.log.user({msg : err.message});
                    reject(new Error("Extension "+firstArgs+" not added to cli properly"));
                } else {
                    fileManipulation.getFilesList(path.join(extPath,"commands"),null,function(err,files){
                        if(err) {
                            multispinner.add.text = "Extension for cli should be inside the commands folder";
                            reject(new Error("Extension for cli should be inside the commands folder"));
                        } else {
                            fileManipulation.writeSync(commandsObjPath,JSON.stringify(commandsObj,null,' '));
                            if(checkForLyteApp(options,"app")) {
                                if(cliPath.indexOf(rootPath) != -1) {
                                    let packageJSONPath = path.join(rootPath,"package.json");
                                    if(fileManipulation.fileExist(packageJSONPath)) {
                                        var packageJSONObj = JSON.parse(fileManipulation.readSync(packageJSONPath,'utf-8'));
                                        let cliExtObj = packageJSONObj["cli-addons"] || {};
                                        cliExtObj[firstArgs] = version || '*';
                                        packageJSONObj["cli-addons"] = cliExtObj;
                                        fileManipulation.writeSync(packageJSONPath,JSON.stringify(packageJSONObj,null,' '));
                                    }
                                }
                            }
                            multispinner.add.text = "Extension to the lyte-cli added";
                            resolve();
                        }
                    },function(file){
                        let name = path.parse(file).name;
                        let commandInPackage = commandsObj[name];
                        if(commandInPackage) {
                            if(commandInPackage.includes('default')) {
                                fileManipulation.removeSync(extPath,true);
                                reject(new Error("Default commands should not be overrided"));
                            } else {
                                let prompt;
                                if(process.env.PRODUCTION) {
                                    reject(new Error("The command "+name+"is already bundled with packageNames "+commandInPackage));
                                } else {
                                    prompt = fileManipulation.prompt("The command "+name+" is already bundled with packageNames "+commandInPackage+".Do u want to override the command ? Yes/No");
                                }
                                if(prompt) {
                                    commandsObj[name] = [firstArgs];
                                } else {
                                    commandsObj[name].splice(commandInPackage.indexOf(firstArgs),1);
                                    commandsObj[name].push(firstArgs);
                                }
                            }
                        } else {
                            commandsObj[name] = [firstArgs];
                        }
                    });
                }
            });
        } catch(e){
            reject(e);
        }
        
        }
    });
};