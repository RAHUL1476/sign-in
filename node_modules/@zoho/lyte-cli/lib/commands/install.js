require = global.require;
const { exec } = require("child_process"),
	 path = require("path"),
	fileManipulation  = require("@zoho/lyte-cli-utils").fileManipulation;
function install(options,resolve,reject) {
	options.ui.startSpinner({module:'install',msg: 'Installing the addons ...'},options); 
	var userLog = options.log.user;
	var registry = options.registry;
	var args = options.cliArgs;
	var package = args[1];
	var version = options.version;
	var rootPath = options.root;
	var appPackageJSONPath = path.join(rootPath,"package.json");
	var toPath;
	var spinnerText = options.multispinner.spinners.install;
	let themeFolderList =[];
	
	if(options.theming) {
		if(options.outputPath) {
			toPath = options.outputPath;
		} else {
			toPath = options.folders.src.themes ||  path.join(options.root,"css")
		}
		let themesPath = path.join(toPath,"themes");
		if(fileManipulation.fileExist(themesPath)) {
			themeFolderList = fileManipulation.readdirSync(themesPath);
		}
		
	}                        
	var copyFiles = function(from,package,fromBower) {	
		if(fileManipulation.fileExist(from)) {
			var to = path.join(toPath,"addons",package);
			var fileList = fileManipulation.getFilesListSync(from);
			let filterFn = function(file) {
				file = path.join(from,file);
				if(fromBower)  {
					return !fileManipulation.lstatSync(file).isDirectory() && path.parse(file).ext  != ".map";
				} else {
					return path.parse(file).ext != ".map";
				}
			};
			fileList = fileList.filter(filterFn);			
			var fileObj;
			var toFile;
			let dir;
			let toPathForStyles = path.join(to,"styles");
			if(options.clean) {
				fileManipulation.removeSync(to,true);
			}
			fileList.forEach(function(file) {
				fileObj = path.parse(file);
				dir = fileObj.dir.replace(from,toPathForStyles);
				toFile = path.join(dir,fileObj.name+'.less');
				spinnerText.text = "Creating the files "+path.relative(to,toFile);								
				if(!fileManipulation.fileExist(toFile)) {
					fileManipulation.mkdirSync(dir);
					fileManipulation.writeSync(toFile,' ');
				}
				if(themeFolderList.length) {
					themeFolderList.forEach(function(list){
						let themeToPath = path.join(to,"themes",list);
						toFile = path.join(fileObj.dir.replace(from,themeToPath),fileObj.name+'.less');
						spinnerText.text = "Creating the files "+path.relative(to,toFile)
						if(!fileManipulation.fileExist(toFile)) {
							fileManipulation.mkdirSync(dir);
							fileManipulation.writeSync(toFile,' ');
						}
					});
				}
			});
			spinnerText.text = "Addons installed successfully";
			resolve();
		} else {
			reject(new Error( "no components exist in folder "+from));
		}
	};
	
	let copyTaskForThemes = function(filePath,package,fromBower) {
		if(options.theming) {
			if(options.filePath) {
				
			}
			var buildFilePath = path.join(filePath,"build","build.js");
			if(fileManipulation.fileExist(buildFilePath)) {
				var filePathOptions = 	{
					root : filePath,
					path : path,
					cliRoot : options.cliRoot
				};
				require(buildFilePath).configureFolders(filePathOptions);
				copyFiles(filePathOptions.folders.src.javascript,package);
			} else {
				copyFiles(path.join(filePath,'components'),package,fromBower);
			}	
		} else {
			userLog({msg : "Theming options is disabled",color :"yellow"});
			resolve();
		}
	};
	var bowerFilePath = path.join(rootPath,"bower_components",package);
	var filePath;
	if(fileManipulation.fileExist(bowerFilePath)) {
		copyTaskForThemes(bowerFilePath,package,true);
	} else {
		if(fileManipulation.fileExist(path.join(appPackageJSONPath))) {
			// var toInstall = version ? package+'@'+version : package;
			//exec('npm install '+toInstall+' --registry '+registry,function(error,stdout,stderr) {
				// if(error){
				// 	reject(new Error(stderr));
				// } else {
					filePath = path.join(rootPath,"node_modules");					
					var appPackageJSONContent = JSON.parse(fileManipulation.readSync(appPackageJSONPath,'utf-8'));
					if(options.theming) {
						let addonsInApp = appPackageJSONContent.addons;
						if(addonsInApp) {
							addonsInApp.forEach(function(module) {
								copyTaskForThemes(path.join(filePath,module),module);
							});
						} else {
							spinnerText.text = "Addons installed successfully";
						}
					}  else {
						spinnerText.text = "Addons installed successfully";
					}
					let addonsBuildPath = path.join(filePath,"build","build.js");
					if(fileManipulation.fileExist(addonsBuildPath)) {
						var addonsBuildPathObj = require(addonsBuildPath);
						if(addonsBuildPathObj.afterAddonInstall) {
							addonsBuildPathObj.afterAddonInstall(options,appPackageJSONContent);
						}
					}
				// }
			//});
		} else {	
			spinnerText.text = "Installing the addons failed";	
			reject(new Error("Package configuration file(package.json) missing.Run 'npm init"));
		}	
	}
	
}

module.exports = install;
