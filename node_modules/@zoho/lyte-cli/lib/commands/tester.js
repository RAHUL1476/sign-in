require = global.require;
var fileManipulation = require('@zoho/lyte-cli-utils').fileManipulation,
    path = require('path'),
    espree = require('espree'),
    escodegen = require('escodegen'),
    mime = require('mime-types'),
    exec = require('child_process').exec,
    http = require('http'),
    os = process.platform,
	launchChromium = require("../../lib/utilities/launchChromiumBrowser"),
	buildFile,userLog,testParams={},testFolder,unitTestFolder,functionalTestFolder,lytmusFolder,startTimer,maxTabs,tabCounter=0;
//Test starts with this function
var runTest = function(options){
    var resolve = this.resolve;
    var reject = this.reject;
    startTimer = new Date().getTime();
    userLog = options.log.user;
    testFolder = options.folders.src.tests;
	var fileExist = fileManipulation.fileExist;
	buildFile = require(path.join(options.root,"build","build.js"));
    try{
		if((conf = buildFile.configureForTestCommand)){
			conf(options);
		}
        if(fileExist(testFolder)){
            var subFolder = options.d,
                cliArgs = options.cliArgs,
                unit_test =  options["unit-test"],
                functional_test = options["functional-test"],
                specArray = [],
                unitTestFolderExist,functionalTestFolderExist,
                packageContent;
            let count = 0;
            let len = 0;
            let allFilesIterated = false;
            lytmusFolder = path.join(options.root,"node_modules","@zoho/lytmus");
            if(!fileExist(lytmusFolder)){
                userLog({color :'red',msg:'Please install the lytmus package inside your application'});
                userLog({color : 'red',msg: 'We have moved lytmus package to @zoho/lytmus from this cli version.Please install the @zoho/lytmus package in your application'})
                throw(new Error('npm install @zoho/lytmus@1.2.0  --registry http://integ-docker:4873'));   
            }
            packageContent = JSON.parse(fileManipulation.readSync(path.join(lytmusFolder,'package.json'),'utf-8'));
            if(packageContent.version < '1.2.0'){
                throw(new Error('Your lyte-cli version doesnt support your lytmus version.Please upgrade your lytmus version from '+packageContent['version']+' to 1.2.0.\nnpm install @zoho/lytmus@1.2.0 --registry http://integ-docker:4873'));
            }
            options.port = options.port ? options.port : 3001;
            options.noBrowser = options.noBrowser ? options.noBrowser : false;
            maxTabs = options.maxTabs || 20;
            unitTestFolder = path.join(testFolder,'unit_tests');
            functionalTestFolder  =  path.join(testFolder,'functional_tests');
            unitTestFolderExist = fileExist(unitTestFolder);
            functionalTestFolderExist = fileExist(functionalTestFolder);
            var runAllTests = !cliArgs[1] && !(unit_test || functional_test) && !options.d;
            testParams.spec = [];
            testParams.specUrls = [];
            options.random = options.random || false;
            if(!(/^\d+$/.test(options.port))) {
                userLog({msg :"Value given for port number is not valid",color :"red"});
                throw(new Error('Please enter a valid port number'));
            }
            if(options.random != true && options.random != "true" && options.random!="false" && options.random != false){
                userLog(options.random+" "+typeof(options.random));
                throw(new Error('Please provide a boolean value for random option'));
            }
            if(!runAllTests){
                unit_test = !functional_test; //Setting the default option as unit-test
            }
            //Getting the list of specs that needs to be tested
            var setSpecParams = function (file,func_flag,relativeFolder){
                    var fullPath = file;
                    file = path.relative(relativeFolder,file);
                    file = convertPathToUrl(file);
                    testParams[file] = {};
                    testParams[file].functional = func_flag;
                    testParams[file].path = fullPath;
                    testParams.spec.push(file); 
            };

            var validationFn = function(file){
                return file.includes('.spec.js');
            }

            //Setting the browser details and starting the server
            var startBrowserFn = function(){
                try{
                    var specLen = testParams.spec.length;
                    if(specLen <= 0){
                        throw(new Error('No specs detected....Terminating'));
                    }
                    else if(specLen > maxTabs){
                        options.detailsTab = true;
                    }
                    if(!options.headless){
                        var browser = options.browser ;
                        var browserObj = {
                            darwin : {
                                googlechrome : 'Google Chrome',
                                firefox : 'Firefox',
                                safari : 'Safari'
                            },
                            linux : {
                                googlechrome : 'google-chrome',
                                firefox : 'firefox'
                            },
                            win32 : {
                                googlechrome : 'chrome',
                                firefox : 'Firefox',
                                iexplore : 'iexplore'
                            }
                        }
                        if(!browser){
                            browser = browserObj[os]['googlechrome']
                        }else{
                            switch(browser){
                                case 'googlechrome':
                                case 'firefox':
                                case 'iexplore':
                                case 'safari':
                                        if(browserObj[os][browser]){
                                            browser = browserObj[os][browser];
                                        }else{
                                            throw( new Error("Your os doesn't support "+ browser));
                                        }
                                break;
                                default:
                                    userLog({color:'red',msg:'Invalid browser'});
                                    userLog({color:'red',msg:'browser will only take these values:'});
                                    userLog({color:'red',msg:'		* googlechrome'});
                                    userLog({color:'red',msg:'		* firefox'});
                                    userLog({color:'red',msg:'		* iexplore'});
                                    userLog({color:'red',msg:'		* safari'});
                                    throw(new Error('Please provide the valid values.'));
                            }
                        }
                        testParams.browser = browser;
                    }
                    createServer(options,resolve,reject);
                }catch(e){
                    reject(e);
                }
            };

            //Call the startBrowserFn
            let successCallback = function(obj){
                allFilesIterated = false;
                count = 0;
                len = 0;
                if(obj.functional && obj.unit){
                    startBrowserFn();
                }
            }
            if(runAllTests){
                var obj={};
                if(!unitTestFolderExist && !functionalTestFolderExist){
                    throw(new Error('No folders identified under tests folder'));
                }else{
                    if(functionalTestFolderExist){
                        fileManipulation.getFilesList(functionalTestFolder,validationFn,function(err,fileList){
                            if(err){
                                reject(err);
                            }
                            allFilesIterated = true;
                            len = fileList.length;
                            if(count == len && allFilesIterated){
                                obj.functional = true;
                                successCallback(obj);
                            }
                        },function(file){
                            setSpecParams(file,true,functionalTestFolder);
                            count++;
                            if(count == len && allFilesIterated){
                                obj.functional = true;
                                successCallback(obj);
                            }
                        })
                    }else{
                        obj.functional = true;
                    }
                    if(unitTestFolderExist){
                        fileManipulation.getFilesList(unitTestFolder,validationFn,function(err,fileList){
                            if(err){
                                reject(err);
                            }
                            allFilesIterated = true;
                            len = fileList.length;
                            if(count == len && allFilesIterated){
                                obj.unit = true;
                                successCallback(obj);
                            }
                        },function(file){
                            setSpecParams(file,false,unitTestFolder);
                            count++;
                            if(count == len && allFilesIterated){
                                obj.unit = true;
                                successCallback(obj);
                            }
                        })
                    }else{
                        obj.unit = true;
                    }   
                }
            }else if(cliArgs[1]){
                specArray = cliArgs[1].split(',');
                var passSpec = function(specArray,flag,relativeFolder){
                    var len = specArray.length;
                    for(var i = 0;i < len ; i++ ){
                        var file = specArray[i];
                        if(subFolder){
                            file=path.join(subFolder,specArray[i])
                        }
                        file = path.join(relativeFolder,file);
                        if(!file.includes(".js") && file.includes(".spec")){
                            file=file+".js";
                        }
                        if(fileExist(file)){
                            setSpecParams(file,flag,relativeFolder);
                        }else{
                           // if(len == 1){
                                throw( new Error('File named '+file+' not found'));
                            //}else{
                                //userLog({color:'red',msg:'File named '+file+' not found'});
                            //}
                        }
                    }  
                } 
                if(functional_test){
                    passSpec(specArray,true,functionalTestFolder);
                }else{
                    passSpec(specArray,false,unitTestFolder);
                }
                startBrowserFn();
            }else{
                var getSpecValues = function(folder,func_flag,relativeFolder){
                    if(subFolder){
                        folder = path.join(folder,subFolder);
                    }
                    if(fileExist(folder)){
                        fileManipulation.getFilesList(folder,validationFn,function(err,fileList){
                            allFilesIterated = true;
                            len = fileList.length;
                            if(allFilesIterated && count == len){
                                startBrowserFn();
                            }
                        },function(file){
                            setSpecParams(file,func_flag,relativeFolder);
                            count++;
                            if(allFilesIterated && count == len){
                                startBrowserFn();
                            }
                        })
                    }else{
                        throw(new Error('Folder named '+folder+' doesnt exist'));
                    }
                }
                if(functional_test){
                    getSpecValues(functionalTestFolder,true,functionalTestFolder);
                }else{
                    getSpecValues(unitTestFolder,false,unitTestFolder);   
                }
            }
            
        }else{
            throw(new Error('Test folder does not exist'));
        }
    }catch(e){
       reject(e);
    }
}

//Parsing the spec content 
function parseSpecContent(specPath){
    try{
        var specValue;
        if(specPath.indexOf('functional_tests') != -1){
            specValue = path.relative(functionalTestFolder,specPath);
        }else{
            specValue = path.relative(unitTestFolder,specPath);
        }
        specValue = convertPathToUrl(specValue);

        var specObj = testParams[specValue];
        var fileData = fileManipulation.readSync(specPath,'utf-8').toString();
		if((beforeTest = buildFile.beforeTestExecution)){
			fileData = beforeTest(specPath,fileData);
		}
		var node = espree.parse(fileData,{
            ecmaVersion : 9
		});
        var nodeBody = node.body;
        var nodeLen = nodeBody.length;
        specObj.specContent = '';
        //Traversing the node to get the beforeLoad hook and dependency file list
        for(var i=0 ; i<nodeLen ; i++ ){
            if(nodeBody[i].type == 'ExpressionStatement'){
                var exp = nodeBody[i].expression;
                var callee = exp.callee;
                //Condition check to get the jasmine.require hook alone
                if(exp && callee && callee.type == 'MemberExpression' && (calleeObj=callee.object) && calleeObj.name == 'jasmine' &&(calleeProp=callee.property) && calleeProp.name == 'require'){
                    if(exp.arguments){
                        var arg = exp.arguments;
                        var flagProp = -1,beforeLoadIndex = -1;
                        var argLen = arg.length;
                        for (var k =0; k< argLen ; k++){
                            var currentArg = arg[k];
                            if(currentArg.type == 'ObjectExpression'){
                                var propLen = currentArg.properties.length;
                                for(var j=0 ; j < propLen ; j++){
                                    var prop = currentArg.properties[j];
                                    var propKey = prop.key;
                                    var propValue = prop.value;
                                    if(prop.type == 'Property' &&  propKey.type == 'Identifier'){
                                        switch(propKey.name){
                                            case 'beforeLoad':
                                                if(propValue.type == 'FunctionExpression'){
                                                    specObj.beforeLoadFn = escodegen.generate(prop.value);
                                                    flagProp = k;
                                                    beforeLoadIndex = j;
                                                }
                                            break;
                                            case 'files' :
                                                if(propValue.type == 'ArrayExpression'){
                                                    var elements = propValue.elements;
                                                    if(elements.length > 0){
                                                        specObj.htmlfile=[];
                                                        specObj.cssfile = [];
                                                        specObj.jsfile = [];
                                                        var elemLen = elements.length;
                                                        for(var d=0; d < elemLen ; d++){
                                                            var value = elements[d].value
                                                            var extension = value.substring(value.lastIndexOf('.')+1)
                                                            switch(extension){
                                                                case 'html':
                                                                    specObj.htmlfile.push(value);
                                                                    break;
                                                                case 'css':
                                                                    specObj.cssfile.push(value);
                                                                    break;
                                                                case 'js':
                                                                    specObj.jsfile.push(value);
            
                                                            }
                                                        }
                                                    }
                                                }
                                        }
                                    }
                                }
                            }
                        }
                        if(flagProp >=0 && beforeLoadIndex >=0){
                            arg[flagProp].properties.splice(beforeLoadIndex,1);
                            flagProp =-1;
                            beforeLoadIndex = -1;
                        }
                    }
                }
            }
        }
        //Getting the content of the spec file
        specObj.specContent = escodegen.generate(node);
    }catch(e){
        if(e.lineNumber && e.column){
            throw(new Error(e.message+' while parsing '+specPath+' file in '+e.lineNumber+':'+e.column));
        }else{
            throw(e);
        }
    }
}
//gets the folder name of lyte from bower.json
function getFolderNameBower(options,keyword){
        var folderName;
        let bowerJsonPath = path.join(options.root,'bower.json');
        if(fileManipulation.fileExist(bowerJsonPath)){
            var bowerJson = fileManipulation.readSync(bowerJsonPath,'utf-8');
            var content = JSON.parse(bowerJson);
            if(content['dependencies']){
                var dependencies = content['dependencies'];
                for(var key in dependencies){
                    if(dependencies[key].indexOf(keyword) != -1){
                        folderName = key;
                        break;
                    }
                }
            }
            return folderName;   
        }else {
            return ;
        }  
}

function convertPathToUrl(filePath){
    if(os == 'win32'){
         filePath = filePath.split(path.sep).join('/');
    }
    return filePath;
}

function generateSpecUrl(options){
    var cusqp;
	if(options.qp){
		cusqp = options.qp;
    }
    var random = options.random ;
    var port = options.port;
    var baseUrl = 'http://localhost:'+port+"/?lytmus-spec=";
    var urlqp = cusqp ? "&random="+random+"&"+cusqp : "&random="+random;
    for(var i =0 ;i<testParams.spec.length;i++){
        var specUrl = baseUrl + testParams.spec[i];
        options.log.user({color : 'yellow',msg:specUrl+urlqp});
        testParams.specUrls.push(specUrl+urlqp);
    }
}

//Server code for executing specs
function createServer(options,resolve,reject){
    var specIndex = 0;
    var len = testParams.spec.length;
    var port = options.port;
    options.iframeURL = "http://localhost:"+port+"/";
    var appDir = options.root;
    var cliDir = options.cliRoot;
    var counter = 0,totalSpecs =0,failures =0;
    var random = options.random ;
    var flag = true;
    var specDetails = {};
    var specNames=[];
    var headless = options.headless || false;
    var detailsTab = options.detailsTab || false;
    var rows = [];
    var formatter = options.formatter;
    var report = "";
    var failureMsgCmd = '';
	var failureMsg = '',fromReport,indexFlag;
	var cusqp;
	if(options.qp){
		cusqp = options.qp;
	}
    if(formatter){
        rows.push([
            "\x1b[0m\x1b[1m\x1b[34mFile Name\x1b[0m",
            "\x1b[0m\x1b[1m\x1b[34mTest-type\x1b[0m",
            "\x1b[0m\x1b[1m\x1b[34mTest Results\x1b[0m",
            "\x1b[0m\x1b[1m\x1b[34mFailures\x1b[0m",
            "\x1b[0m\x1b[1m\x1b[34mTest Status\x1b[0m"
        ]);
    }
    var WritingResponse = function(fileArray){      //Writing response for the dependency files
        var len = fileArray.length;
        var finalData = '';
        for(var i=0; i<len ;i++){
            var filePath = path.join(appDir,fileArray[i]);
            if(fileManipulation.fileExist(filePath)){
                var data = fileManipulation.readSync(filePath,'utf-8');
                finalData = finalData + data+'\n';
            }else{
                userLog({color :'red',msg:'File named '+filePath+' not found'});
            }
        }
        return finalData;

    };

    var creatingHTMLContent = function(specDetails,specNames){        //creating the html content for maxTabs option
        var htmlObj=``;
        htmlObj+=`<html>
                    <head>
                        <style>
                                table {
                                    border-collapse: collapse;
                                    width: 100%;
                                    margin: 30px 0;
                                }
                                .SpecTable tr:last-child td:first-child {
                                    border-radius: 0 0 0 10px;
                                }
                                .SpecTable tr:last-child td:last-child {
                                    border-radius: 0 0 10px 0;
                                }
                                .SpecTable th {
                                    padding: 15px 10px;
                                    text-align: center;
                                    background: #669e99;
                                    color: #fff;
                                    text-transform: uppercase;
                                    font-weight: normal;
                                    font-size: 13px;
                                    
                                }
                                .SpecTable th:first-child {
                                    text-align: left;
                                    border-radius: 10px 0 0 0;
                                    border-left: 1px solid #669e99;
                                }
                                .SpecTable th:last-child {
                                    border-radius: 0 10px 0 0;
                                    border-right: 1px solid #669e99;
                                }
                                .SpecTable td:first-child {
                                    text-align: left;
                                    border-left: 1px solid #ddd;
                                }
                                .SpecTable td:last-child {
                                    border-right: 1px solid #ddd;
                                }
                                .SpecTable td {
                                    text-align: left;
                                    padding: 15px 10px;
                                    border-bottom: 1px solid #ddd;
                                }
                                .SpecTable tbody>tr>:nth-child(1){
                                    border-right : 1px solid #ddd
                                }
                                .SpecTable tbody>tr>:nth-child(2){
                                    border-right : 1px solid #ddd
                                }
                                .SpecTable thead>tr>th{
                                    border-right : 1px solid #ddd	   
                                }
                                .SpecTable thead{
                                    border-top : 1px solid #ddd
                                    border-bottom : 1px solid #ddd	
                                }
                                .failed{
                                    color:red
                                }
                                .passed{
                                    color:green
                                }
                                .incomplete{
                                    color:#CCCC00
                                }
                        </style>
                    </head>
                    <body>`
        htmlObj+=`<h1>Spec Details</h1>`
        htmlObj+=`<table class=SpecTable cellspacing="0" cellpadding="0">
                        <thead>
                            <tr>
                                <th>Spec-Name</th>
                                <th>Test-Type</th>
                                <th>Message</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>`
        for(var i=0;i<specNames.length;i++){
            var obj = specDetails[specNames[i]] ;
			var urlqp = cusqp ? "&fromReport=true&random="+random+"&"+cusqp : "&fromReport=true&random="+random;
			var specUrl = 'http://localhost:'+port+"/?lytmus-spec="+specNames[i]+urlqp+"#/"
            options.log.user({color :'yellow',msg : specUrl});
            htmlObj+=` <tr>
                        <td><h4><a href = '`+specUrl+`' target="_blank" >`+specNames[i]+`</a></h4></td>
                        <td>`+obj.type+`</td>
                        <td class ="`+obj.status+`"><pre>`+obj.msg+`</pre></td>`;
            htmlObj += `<td class ="`+obj.status+`">`+obj.status+`</td>`;
            htmlObj+=`</tr> `
        }
        htmlObj+=`</tbody></table>`
        htmlObj+=`</body>
                </html>`

        return htmlObj;

    };

    var rephrasingTheReport = function(reportObj){
        var globalInfoObj =  reportObj['global'].info;
        if(globalInfoObj.overallStatus == 'failed'){
            if(globalInfoObj.failedExpectations.length){
                failureMsgCmd += "\x1b[0m\x1b[1mGlobal failure :\x1b[34m\x1b[0m"+'\n';
                failureMsg +='Global failure : '+'\n';
            }
            for(var i =0;i<globalInfoObj.failedExpectations.length;i++){
                var failedExpectations = globalInfoObj.failedExpectations[i];
                failureMsgCmd +=("\x1b[0m\x1b[31mMessage :\n "+failedExpectations.message+'\nStack : \n '+failedExpectations.stack+'\n\x1b[0m');
                failureMsg += 'Message :\n '+failedExpectations.message+'\nStack : \n '+failedExpectations.stack+'\n';
            }
        }else if(reportObj['global'].info.overallStatus == 'incomplete'){
            failureMsgCmd += "\x1b[0m\x1b[1m\x1b[34mGlobal Pending Reason : \x1b[0m"+'\n';
            failureMsg += 'Global Pending Reason : '+'\n' ;
            failureMsgCmd += "\x1b[0m\x1b[33mglobalInfoObj.incompleteReason\x1b[0m"+'\n';
            failureMsg += globalInfoObj.incompleteReason+'\n';
        }
        var globalChildren = reportObj['global'].children;
        tabSpace = 0;
        for(var i = 0 ; i < globalChildren.length ; i++){
           displayTheSpecContent(globalChildren[i]);
        }

    }

    var iteratingFailureMsg = function(failedExpectations,fullName){
        if(failedExpectations.length){
            failureMsgCmd += "\x1b[0m\x1b[1m\x1b[34m"+fullName+"\x1b[0m"+'\n';
            failureMsg += fullName+'\n';
        }
        failureMsgCmd += ("\x1b[0m\x1b[31m"+failedExpectations+"\x1b[0m");
        failureMsg += failedExpectations;
    }

    var displayTheSpecContent = function(obj){
        var st = addTheSpace();
        var type = obj.type;
        var status = obj.info.status;
        var description = obj.info.description;
        var failedExpectations = obj.info.failedExpectations;
        var fullName = obj.info.fullName;
        var children = obj.children;
        if(type == 'suite'){
            if(status == 'passed'){
                report += st+"\x1b[0m\x1b[32m"+description+"\x1b[0m"+'\n';
            }else if(status == 'pending'){
                report += st+"\x1b[0m\x1b[33m"+description+"\x1b[0m"+'\n';
            }else{
                report += st+"\x1b[0m\x1b[31m"+description+"\x1b[0m"+'\n';
                iteratingFailureMsg(failedExpectations,fullName);   
            }
            tabSpace++;
            for(var j =0 ; j<children.length ; j++){
                displayTheSpecContent(children[j]);
            }
            tabSpace--;
        }else if(type == 'spec'){
            if(status == 'passed'){
                report += st+"\x1b[0m\x1b[32m"+description+"\x1b[0m"+'\n';
            }else if(status == 'pending'){
                report += st+"\x1b[0m\x1b[33m"+description+"\x1b[0m"+'\n';
            }else{
                report += st+"\x1b[0m\x1b[31m"+description+"\x1b[0m"+'\n';
                iteratingFailureMsg(failedExpectations,fullName);
            }
        }
    }

    var addTheSpace = function(){
        var st = "";
        for(var k =1;k<=tabSpace;k++){
            st = st+'  ';
        }
        return st;
    }
  
    var server = http.createServer(async function(request,response){
        try{
            var spec_name;
            var url = request.url.substring(1);
            var method = request.method;
            var qp;
            var contentType,writeData;
            //Getting the spec name from the url
            if(url.indexOf("lytmus-spec") != -1){
                url=decodeURIComponent(url);
                qp=url.substring(url.indexOf("?")+1);
                qp=qp.split("&");
                qp.forEach(function(param){
                    if(param.includes("lytmus-spec")){
                        var temp=param.split("=");
                        spec_name=temp[1];
                    }
                    if(param.includes('fromReport')){
                        var temp = param.split('=');
                        fromReport = true;
                    }
                }) 
            }
            else if((qp=request.headers.referer) && qp.indexOf('live')==-1){
                qp=qp.substring(qp.indexOf("?")+1);
                qp=qp.split("&");
                qp.forEach(function(param){
                    if(param.includes("lytmus-spec")){
                        var temp=param.split("=");
                        spec_name=temp[1];
                    }
                })
            }
            if(method == 'GET'){

                var specParams = testParams[spec_name];
                if(url.indexOf('.png')!=-1 || url.indexOf('.jpeg')!=-1 || url.indexOf('.gif')!=-1 || url.indexOf('.svg')!=-1){
                    /*
                        Image files that are needed by the server
                    */
                    fileManipulation.lstat(url, (function(error, stat) {
                        var contenttype;
                        if(error){
                            userLog({color:'red',msg:error});
                            response.end();
                            return;
                        }
                        var strinval=this.toString();
                        if(strinval.indexOf('png')!=-1){
                            contenttype="image/png";
                        }
                        else if(strinval.indexOf('jpeg')!=-1){
                            contenttype="image/jpeg";
                        }
                        else if(strinval.indexOf('gif')!=-1){
                            contenttype="image/gif";
                        }
                        else if(strinval.indexOf('svg')!=-1){
                            contenttype="image/svg+xml"
                        }
                        response.writeHead(200, {
                            'Content-Type' : contenttype,
                            'Content-Length' : stat.size
                        });
                        var readStream = fileManipulation.createReadStream(path.join(options.root,this.toString()));
                        readStream.on('open', function () {
                            readStream.pipe(response);
                        });
                        readStream.on('error', function(err) {
                            response.end(err);
                        });
                    }).bind(url));
                }
                else{
                    
                    if(url.includes("lytmus-spec")){
                        /* Serving the specRunner.html */
                        parseSpecContent(specParams.path);
                        var nodemodulesPath = path.join(appDir,'node_modules');
                        indexFlag = false;
                        var runnerPath = path.join(nodemodulesPath,'@zoho','lytmus','jasmineConfig','SpecRunner.html');
                        var data = fileManipulation.readSync(runnerPath,'utf-8').toString();
                        if(fileManipulation.fileExist(path.join(nodemodulesPath,'lyte'))){
                            data=data.replace(/\[\[folder\]\]/g,path.join("node_modules","lyte"));
                        }else{
                            var folder = getFolderNameBower(options,'/lyte/');
                            folder = folder ? path.join("bower_components",folder) : path.join("node_modules","lyte") ;
                            data = data.replace(/\[\[folder\]\]/g,folder);
                        }
                        data = specParams.functional ?  data.replace("[[url]]",options.iframeURL) : data.replace(/(<iframe).*(<\/iframe.)/,'');
                        writeData = data;
                        contentType = 'text/html'; 
                    }else if( url == 'getvars'){
                        /* To initialize the variables */
                        contentType = 'application/javascript' ;
                        writeData = "var appName = '"+appDir+"'";
                    }else if( url =='' && specParams.functional){
                        // Serving the index.html for functional_tests
                        if(fileManipulation.fileExist(path.join(options._appOutputFolder,'index.html'))){
                            indexFlag = true;
                            url = path.join(options._appOutputFolder,'index.html');
                            writeData = fileManipulation.readSync(url);
                            contentType = 'text/html';
                        }else{
                            throw(new Error('index.html not found under the output folder'));
                        }
                    }else if( url == 'getBeforeLoadFile'){
                        /* Writing the beforeLoad hook for the spec */
                        contentType = 'application/javascript' ;
                        var beforeJSFn;
                        if(beforeJSFn =specParams.beforeLoadFn){
                            writeData="("+beforeJSFn+")();"
                        }
                    }else if( url == 'getJsFile'){
                        /* Serving the js files */
                        var jsfile;
                        contentType = 'application/javascript';
                        if((jsfile = specParams.jsfile) && jsfile.length != 0){
                            writeData = WritingResponse(jsfile);
                        }
                    }else if( url == 'getCssFile'){
                        /* Serving Css files */
                        var cssfile;
                        contentType = 'text/css' ;
                        if((cssfile = specParams.cssfile) && cssfile.length != 0){
                            writeData = WritingResponse(cssfile);
                        }
                    }else if( url == 'getHtmlFile'){
                        /* Serving html files */
                        var htmlfile;
                        contentType = 'text/html';
                        if((htmlfile = specParams.htmlfile) && htmlfile.length != 0){
                            writeData = WritingResponse(htmlfile);
                        }
                    }else if( url == 'getSpec'){
                        /* Serving spec files */
                        contentType = 'application/javascript';
                        writeData = specParams.specContent ;
                        
                    }else if(url == 'testDetails'){
                        var data = '';
                        // Serving the live tab 
                        var handleTabs = `var tabRef = [];
                            function openLiveTabs(url,file){
                                var ref;
                                ref=window.open(url);
                                tabRef.push(ref);
                            }
                            
                            function closeAllTabs(file){
                                tabRef[file].close();
                            }`;
                            var WebSocket = require("ws");
                            var testSocketClient = `var socket;
                                                    var counter=0;
                                                    function start(){
                                                        socket = new WebSocket('ws://localhost:[[port]]');
                                                        socket.onopen = function() {
                                                            console.log("Connection is established");
                                                            socket.send("connected");
                                                        }
                                                        socket.onmessage = function(message) {
                                                            message = JSON.parse(message.data);
                                                            document.body.innerHTML=message.specContent;
                                                        }
                                                    
                                                        socket.onclose = function() {
                                                            console.log("connection get closed");
                                                            
                                                        }
                                                        
                                                        socket.onerror = function(error) {
                                                            console.log("error "+error);
                                                        }
                                                    }
                                                    start();`
                            var testSocketServer = function(options,port){
                                var testSocket = new WebSocket.Server({
                                    port:port
                                });
                                testSocket.on('connection',function connection(ws){
                                    options.client = ws;
                                    ws.on('message',function incoming(message){
                                        // ws.send(JSON.stringify({
                                        //     specDetails : options.aliveDetails
                                        // }));
                            
                                    })
                                    ws.on("error",function(e) {
                                        
                                    })
                                    
                                }.bind(options))   
                            }
                        //liveReloadPort=options.liveReloadPort;
                        var getPort = require("get-port");
                        await getPort().then(function(port) {
                                contentType = "text/html" ;
                                data += '<!DOCTYPE html>\n<html>\n<head>\n';
                                options.log.system("LiveServer running in "+port);                        
                                testSocketServer(options,port);
                                testSocketClient=testSocketClient.replace("[[port]]",port);
                                data += '<script type="text/javascript">\n';
                                data += testSocketClient+'\n';    
                        }); 
                        data += handleTabs+'\n';
                        // //console.log("speclen"+len);
                        for(var i=0;i<maxTabs;i++){
                            tabCounter++;
                            var urlqp = cusqp ? "\\&random="+random+"\\&"+cusqp : "\\&random="+random;
                            var specUrl='http://localhost:'+port+"/?lytmus-spec="+testParams.spec[i]+urlqp+"#/"
                            var urlqp = cusqp ? "&random="+random+"&"+cusqp : "&random="+random;
                            var consoleUrl='http://localhost:'+port+"/?lytmus-spec="+testParams.spec[i]+urlqp+"#/"
                            options.log.user({color:'yellow',msg : consoleUrl});
                            data += 'openLiveTabs("' + specUrl + '","'+ testParams.spec[i] + '")\n';
                            specIndex++;	
                        }
                        data += '</script>\n';
                        data += '</head>\n<body>Running the tests</body>\n';
                        data += '</html>';
                        writeData = data;
                        
                    }else if( url == 'gethelper'){
                        /* Serving the helper files */
                        contentType = 'application/javascript';
                    }else {
                        /* Serving other files */
                        if(url != ""){
                            if(url.indexOf('?') != -1){
                                url = url.substring(0,url.indexOf('?'));
                            }
                            if(indexFlag && options.serveFromDist){
                                if(!path.isAbsolute(url)){
                                    url = path.join(options.outputFolder,url);
                                }
                            }
                            if(fileManipulation.fileExist(url)){
                                writeData = fileManipulation.readSync(url);
                            }				
                            contentType = mime.lookup(url);
                        }
                    }
                    response.writeHead(200,{'Content-Type' : contentType});
                    if(writeData){
                        response.write(writeData);
                    }
                    response.end();
                }

            }else if(method == 'POST'){
                if(request.url == '/SpecDetails'){
                    if(!fromReport){
                        counter++;
                    }
                    var details="",
                        contentType = 'application/javascript',
                        closeWindow = '(function(){ window.close(); })();',
                        writeData;
                    request.on('data', function (chunk) {
                        details += chunk;
                    });
                    request.on('end',function(){
                        var resObj=JSON.parse(details);
                        var globalSpecReport = resObj.specReport['global'];
                        var overallStatus = globalSpecReport.info.overallStatus;
                        var type = testParams[spec_name].functional ? 'functional-test' : 'unit-test';
                        failureMsg = '';
                        failureMsgCmd = '';
                        report = "";
                        totalSpecs+=resObj.totSpec;
                        failures+=resObj.failedSpec;
                        rephrasingTheReport(resObj.specReport);
                        if(overallStatus == 'passed'){
                            globalStatus = ("\x1b[0m\x1b[32mpassed\x1b[0m");
                        } else  if(overallStatus == 'failed'){
                            globalStatus = ("\x1b[0m\x1b[31mfailed\x1b[0m");
                        }  else if (overallStatus == 'incomplete'){
                            globalStatus = ("\x1b[0m\x1b[33mincomplete\x1b[0m");
                        } 
                        rows.push([
                            "\x1b[0m\x1b[36m"+spec_name+"\x1b[0m",
                            "\x1b[0m\x1b[34m"+type+"\x1b[0m",
                            report,
                            failureMsgCmd,
                            globalStatus
						])
						var urlqp = cusqp ? "&random="+random+"&"+cusqp : "&random="+random;
                        var changeUrl = `(function () { window.open(`+'\"http://localhost:'+port+"/?lytmus-spec="+testParams.spec[specIndex]+urlqp+"#/\"" +`,'_self');})()\n`;
                        if(headless){
                            if(!formatter && failureMsgCmd != ''){
                                userLog({msg : "Details about the test suite : "+spec_name,color :"green"})
                               
                                userLog(failureMsgCmd);
                            }
                            endTimer=new Date().getTime();
                            timetaken=(endTimer-startTimer)/1000;
                            if(counter == len){
                                //userLog({color:"cyan",msg:"Time taken :"+timetaken});
                                if(formatter){
                                    userLog({row : rows, 
                                        column : {
                                            columns: {
                                                0: {
                                                    width: 25,
                                                },
                                                1: {
                                                    width: 20
                                                },
                                                2: {
                                                    width:80
                                                },
                                                3: {
                                                    width:60 
                                                },
                                                4: {
                                                    width: 15
                                                }
                                            }
                                        },color :"blue"
                                    });
                             
                                }
                                userLog({color:"cyan",msg:"Total number of files executed : "+len});
                                userLog({color :'cyan',msg : "Tabs opened :"+tabCounter});
                                if(options.keepPortAlive != true){
                                    options.chromiumBrowser.close();
                                    server.close();
                                    if(failures != 0){
                                        userLog({color:'cyan',msg:"Total number of specs : "+totalSpecs});
                                        reject(new Error("Total number of failures :"+failures));
                                    }else{
                                       userLog({color:"cyan",msg:"Details about all the specs"})
                                       userLog({color:'cyan',msg:totalSpecs+" specs, "+("\x1b[0m\x1b[36m"+failures+" failures\x1b[0m")});
                                       response.end();
                          
                                       resolve();
                                    }
                                }else{
                                    userLog({color:"cyan",msg:"Details about all the specs"})
                                    userLog({color:'cyan',msg:totalSpecs+" specs, "+("\x1b[0m\x1b[36m"+failures+" failures\x1b[0m")});
                                }
                            }
                            else if(specIndex < len){
                                writeData = changeUrl;
                            }
                        }
                        else{
                            if(!fromReport){
                                specDetails[spec_name] = {};
                                specDetails[spec_name].type = type;
                                specDetails[spec_name].msg =failureMsg;
                                specDetails[spec_name].status = overallStatus;
                                specNames.push(spec_name);
                                if(counter == len){
                                    userLog({color:"cyan",msg:"Details about all the specs"})
                                    userLog({color:'cyan',msg:totalSpecs+" specs, "+("\x1b[0m\x1b[36m"+failures+" failures\x1b[0m")});
                                    userLog({color:"cyan",msg:"Total number of files executed : "+len});
                                    userLog({color :'cyan',msg : "Tabs opened :"+tabCounter});
                                    if(options.detailsTab){
                                        writeData = closeWindow;
                                        options.client.send(JSON.stringify({
                                            specContent : creatingHTMLContent(specDetails,specNames)
                                        }));
                                        specNames=[];
                                        counter=0;
                                        specIndex = 0;
                                        tabCounter = 0;
                                        totalSpecs = 0;
                                        failures = 0;
                                    }
                                }
                                else if(specIndex < len){
                                    writeData = changeUrl;
                                }
                                else{
                                    if(options.detailsTab){
                                        writeData = closeWindow;
                                    }
                                }
                            }else{
                                 fromReport = false;
                            }
                        }
                        response.writeHead(200,{'Content-Type' : contentType});
                        if(writeData && !fromReport){
                            response.write(writeData);
                            if(specIndex !=0){
                                specIndex++;
                            }
                        }
                        response.end();
                    });
                }
            }
        }catch(e){
            response.end();
            reject(e);
        }
    })
    server.listen(port,function(){
        if(options.noBrowser){
            options.log.user({color : 'cyan',msg:'generating urls'})
            generateSpecUrl(options);
        }else{
            options.log.user({color : 'cyan',msg:'calling setBrowser'})
            setBrowserContext();
        }
    });
    server.on('error',function(err){
        if(err.code == 'EADDRINUSE') {
			var errMsg='';
			userLog({color:'red',msg:"Port is already in use.Please kill the process running on the port manually...."});
			if(os == "win32") {
				errMsg += '\nnetstat -a -n -o | findstr :4000'
				errMsg += '\ntaskkill /PID <<processid>> /F'
			} else {
				errMsg += '\nlsof -i TCP:'+port+"\n";
				errMsg += 'kill -9 <<processid>>'
			}
			userLog({color:'red',msg:errMsg});
            //process.exit(1);
            reject(err);
		}
    })

    function setBrowserContext(){
        var tabs;
        tabs = len < maxTabs ? len : maxTabs;
        if(headless){
            launchChromium(options,function(){
                var flag = true;
                for(var i=1;i<=tabs;i++){
                    if(i!=1){
                        flag = false;
                    }
                openBrowserTab(testParams.spec[specIndex],flag);
                specIndex++;
                }
            });
            
        }else{
            var browserOpener ="";
            if(os == 'win32'){
                browserOpener = 'start '+ testParams.browser;
            }else if (os == 'linux'){
                browserOpener = testParams.browser;
            }else{
                browserOpener = "open -a '"+testParams.browser+"'";
            }
            options.browserOpener = browserOpener;
            if(detailsTab){
                openBrowserTab();  
            }else{
                for(var i=1;i<=tabs;i++){
                    openBrowserTab(testParams.spec[specIndex]);
                    specIndex++;
                }
            }
        }
    }

    function openBrowserTab(specName,firstTime){
        var specUrl = 'http://localhost:'+port+"/?lytmus-spec="+specName;
		var random = options.random ;
        var browserOpener = options.browserOpener ? options.browserOpener : '';
        if(headless){
            tabCounter++;
            var pageRef = '';
            if(!firstTime){
                options.context.newPage().then(function(page){
                    pageRef = page;
                    setPageUrl();
                });

            }else{
                pageRef = options.page;
                setPageUrl();
            }
            
            function setPageUrl(){
                //if(page && page._client._connection) {
                    // page.on('console',function(msg) {
                    // 	userLog({msg : msg.text()})
					// });
					var urlqp = cusqp ? "&random="+random+"&"+cusqp : "&random="+random;
                    pageRef.goto(specUrl+urlqp+"#/",{ 
                        timeout: 0 
					});
					options.log.user({color : 'yellow',msg:specUrl+urlqp});
                    // page.on("error",function(err) {
                    // 	userLog({msg : err});
                    // })   
                //}
            }
        }else if(detailsTab){
            var detailsUrl = 'http://localhost:'+port+"/testDetails";
            var command  = browserOpener + " "+detailsUrl;
            executeCommand(command);
            options.log.user({color : 'yellow',msg:detailsUrl});
        }else{
            tabCounter++;
            var command = browserOpener +" "+specUrl ;
            var urlqp;
            consoleqp = cusqp ? "&random="+random+"&"+cusqp : "&random="+random;
            if(os == 'win32'){
				urlqp = cusqp ? "^&random="+random+"^&"+cusqp : "^&random="+random;
                command = command +urlqp+"#/";
            }else {
				urlqp = cusqp ? "\\&random="+random+"\\&"+cusqp : "\\&random="+random;
                command = command +urlqp+"#/";
            }
            executeCommand(command);
            options.log.user({color : 'yellow',msg:specUrl+consoleqp+"#/"});
        }
    }
    
    function executeCommand(command){
        exec(command,function(error,stdout,stderr){
            if(error){
                userLog({color:'red',msg:error});
                return ;
            }
        });
    }

}


module.exports=runTest;
