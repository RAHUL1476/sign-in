require = global.require;
var http = require('http'),
	mime = require('mime-types'),
	path = require('path'),
	espree = require("espree"),
	utils = require("@zoho/lyte-cli-utils"),
	fileManipulation= utils.fileManipulation,
	checkAnyKeyInObj = utils.commonCliUtils.checkAnyKeyInObj;
function server(options,dependencies) { 
	let filePath;
	var userLog = options.log.user;
	return new Promise(function(resolve,reject){
		var builder = require(path.join(options.root,'build','build')).build,
			port = options.port || 3000,
			origPort = port,
			_appOutputFolder = options._appOutputFolder,
			os = process.platform;
		options.server = true;
		options.routerBaseUrl = require("../utilities/routerTraverse.js")(options.folders.src.routers);
		
		let fn = function(rUrl) {	
			let url = decodeURIComponent(rUrl);
			url = path.normalize(url);
			url = url.replace(/\.\.(%2f|\/)*/g,'');	
			return url;
		}
		
		try {	
			var indexHTMLPath;
			var indexHTMLPathExist;	
			var scriptSnippet = '';
			let matchedWithRouterUrl = false;
			var server = http.createServer(function(request,response) {	
				let routerBaseUrl = options.routerBaseUrl;
				indexHTMLPathExist = fileManipulation.fileExist(indexHTMLPath);		
				let url = fn(request.url.substring(1));
				if(routerBaseUrl) {
					routerBaseUrl = fn(routerBaseUrl);
				}
				let commonFn = function() {
					if(indexHTMLPathExist)	{	
						url = indexHTMLPath;
					}
				}
				
				if(url == '.') {
					commonFn();
				} else if(url == routerBaseUrl || url == routerBaseUrl+path.sep) {
					matchedWithRouterUrl = true;
					commonFn()
				} else {
					if(options.fingerPrint) {
						let urlMap = options.fingerPrintMapping[url]
						urlMap && (url = urlMap);
					}
					// url = url.substring(url.indexOf(path.relative(options.root,options.outputFolder)));
					/*have to handle by the application team absolute path won't throw an error */
					var parsedReq = path.parse(url);
					if(parsedReq.ext){
						if(matchedWithRouterUrl) {
							let regex =  new RegExp("^("+routerBaseUrl+")");
							let splitArray = url.split(regex);
							splitArray = splitArray.pop();
							url = splitArray;
						}
						if(url.indexOf('?') != -1) {
							var index = url.indexOf('?');
							url = path.join(filePath,url.substring(0,index));
						} else {	
							url = path.join(filePath,url);	
						}
					} else {
						commonFn();
					}
				}
				
				fullfill(url);  				    
				function fullfill(url,type) { 
					if(type == "string") {
						var data = url;
						response.writeHead(200,{'Content-Type':mime.lookup()});
						response.write(data);
						response.end();
					} else {
						fileManipulation.read(url,function(err,data) {
						
							if(err) {
								userLog({color:'red',msg:err});
								response.writeHead(404,{'Content-Type': mime.lookup(url)});
								response.end();
								return ;
							}
							response.writeHead(200,{'Content-Type': mime.lookup(url)});
							if(url.indexOf('index.html')!= -1){
								var content;
								if(checkAnyKeyInObj(options.errorObj)){
									content = `<html> <head>`+'\n'+scriptSnippet+'\n'+`</head> </html>`;
								} else{
									var data = data.toString();
									var headIndex = data.indexOf('<head>')+'<head>'.length;
									var beforeScript = data.substring(0,headIndex+1);
									var afterScript =  data.substring(headIndex);
									content = beforeScript+'\n'+scriptSnippet+'\n'+afterScript;
								}
								response.write(content);
							}else{
								response.write(data);	
							}
							response.end();
						});
					}
					
				}
			});			
			server.listen(origPort,async function(){
				options.serverInstance = server;
				try {
					await builder(options,dependencies);
					filePath = options.serveFromSource ? options.root : _appOutputFolder; 
					indexHTMLPath = path.join(_appOutputFolder,"index.html");
					if(!options.production) {
						scriptSnippet ='<script src="'+path.relative(filePath,path.join(options.folders.dist.build,'webSocketClient.js'))+'"></script>\n';
					}
					userLog({color:'cyan',msg:'Will be serving on http://localhost:'+origPort+'/'});
					resolve();
				} catch(e) {
					reject(e);
				}
			});
			server.on("error",function(err) {
				if(err.code == 'EADDRINUSE') {
					if(!options.portFree) {
						var errMsg="Port is already in use.Please kill the process running on the port manually....";
						if(os == "win32") {
							errMsg += '\nnetstat -a -n -o | findstr : ' + origPort;
							errMsg += '\ntaskkill /PID <<processid>> /F';
						} else {
							errMsg += '\nlsof -i TCP:'+origPort+"\n";
							errMsg += 'kill -9 <<processid>>';
						}
						reject(errMsg);
					}
				} else {
					reject(err);
				}
			});
		} catch(e) {
			reject(e);
		}
	});			

}
module.exports = server;