"use strict";
var utils = require("@zoho/lyte-cli-utils"),
	fileManipulation = utils.fileManipulation,
	path = require("path"),
	subFolder,
	filePath = [];
module.exports ={
	description :"themes",
	fileMapTokens :function(options)	{
		return {
			__path__ : options.cliArgs[2]
		}
	},	

	beforeInstall : function(options) {
		options.folders.src.themes = options.folders.src.themes ? options.folders.src.themes : path.join(options.root,"css");
		// if(options.file) {
		// 	var fileName = options.file
		// 	if(options.d) {
		// 		fileName = path.join(options.d,fileName)
		// 	}
		// 	if(fileManipulation.fileExist(path.join(options.folders.src.themes,"themes",options.cliArgs[2],fileName+'.less'))) {
		// 		this.reject(new Error("Theme file name already exist"));
		// 	}		 
		// } else {
			if(fileManipulation.fileExist(path.join(options.folders.src.themes,"themes",options.cliArgs[2]))) {
				this.reject(new Error("Theme name already exist"));
			}	
		// }		
	},
    
	install : function(options) {
		var fromPath = options.folders.src.javascript;
		var toPath;
		if(options.d) {
			toPath = path.join(options.folders.src.themes,"themes",options.cliArgs[2],options.d)
		} else {
			toPath = path.join(options.folders.src.themes,"themes",options.cliArgs[2]);
		}
		var fileList = fileManipulation.getFilesListSync(fromPath);
		var addonList,listOFFiles;
		// if(options.file) {
		// 	var fileName =options.file;
		// 	fileManipulation.truncate(path.join(toPath,path.parse(fileName).name+'.less'));
		// } else {
			if(fileList.length) {
				var fileObj;
				fileList.forEach(function(list) {
					fileObj = path.parse(list);
					fileManipulation.truncate(path.join(fileObj.dir.replace(fromPath,toPath),fileObj.name+'.less'));
				});
			}
		// }
		fromPath = path.join(options.folders.src.themes,"addons")
		if(fileManipulation.fileExist(path.join(options.folders.src.themes,"addons"))) {
			addonList = fileManipulation.readdirSync(fromPath);
			addonList.forEach(function(list){
				if(fileManipulation.validateFile(list)) {
					toPath = path.join(fromPath,list)
					fileManipulation.mkdirSync(path.join(toPath,"themes",options.cliArgs[2]));
					if(fileManipulation.fileExist(path.join(toPath,"styles"))) {
						listOFFiles = fileManipulation.getFilesListSync(path.join(toPath,"styles"));
						if(listOFFiles.length) {
							listOFFiles.forEach(function(file) {
								fileObj = path.parse(file);
								fileManipulation.truncate(path.join(fileObj.dir.replace(path.join(toPath,"styles"),path.join(toPath,"themes",options.cliArgs[2])),fileObj.name+'.less'))
							})
						}
					}
				}
			})
		}
	},

	beforeUninstall : function(options){
		options.folders.src.themes = options.folders.src.themes ? options.folders.src.themes : path.join(options.root,"css");
		
		if(options.d && options.d != '.'){
			subFolder = options.d;
		} else {
			subFolder = '';
		}
		filePath = path.join(options.folders.src.themes,"themes",subFolder,options.cliArgs[2])	
		if(!fileManipulation.fileExist(filePath)){			
			this.reject(new Error("No such themes ("+options.cliArgs[2]+") exists"))
		}
	},

	uninstall : function(options) {
		var permitFlag =true;
		var toPath = path.join(options.folders.src.themes,"themes",options.cliArgs[2])
		fileManipulation.removeSync(toPath,permitFlag);
		var fromPath = path.join(options.folders.src.themes,"addons")
		if(fileManipulation.fileExist(path.join(options.folders.src.themes,"addons"))) {
			addonList = fileManipulation.readdir(fromPath);
			addonList.forEach(function(list){
				toPath = path.join(fromPath,list,"themes",options.cliArgs[2])
				if(fileManipulation.fileExist(toPath)) {
					fileManipulation.removeSync(toPath,permitFlag);
				}
			})
		}
	}

}
