"use strict";
require = global.require;
var utils = require("@zoho/lyte-cli-utils"),
	fileManipulation = utils.fileManipulation,
	folders = utils.commonCliUtils,
	path = require('path'),
	filePath = [];

module.exports = {
	description :"components",
	validateEntityName : function(options) {
		if(folders.validateComponentName(options.cliArgs[2])) {
			return true;
		}
		throw new Error("Component names always start with letters and should not contain capital letters , special character except hyphen.Names should be hyphenated");		
	},
	fileMapTokens :function(options) {
		return {
			__demo__ : options.cliArgs[2]
		}
	},

	locals :function(options) {
		return {
			id : path.join(options.cliArgs[2])
		}
	},

	beforeInstall : function(options) {

		if(!folders.checkForAlreadyExistence(options,'javascript')){
			if(!options.d || options.d == ".") {
				options.d = '';
			}			
		} else {
			this.reject(new Error("Component named "+options.cliArgs[2]+" already registered.Component with same name already exists in the src folder of the component"))
		}		
	},

	install : function(options) {
		var userLog = options.log.user;
		var secondArgs = options.cliArgs[2];
		if(options.theming) {
			var copyFolder = function (options,fromPath,toPath,folderPath) {
					var from,to;
					if(fileManipulation.validateFile(toPath)) {
						fileManipulation.readdirSync(fromPath).forEach(function(file){	
							from = path.join(fromPath,file);		
							if(fileManipulation.lstatSync(from).isDirectory()) {						
								to = path.join(toPath,file);				
								fileManipulation.mkdirSync(toPath);
								copyFolder(options,from,to,folderPath);
							} else {								
								var toPathFolder  = path.join(toPath,folderPath);
							
								var createdFileName = path.join(toPathFolder,file.replace("__demo__",secondArgs));    
								fileManipulation.mkdirSync(path.parse(createdFileName).dir);    	
								if(!fileManipulation.fileExist(createdFileName)) {                  			          		                 
									fileManipulation.writeSync(createdFileName,''); 
									userLog({color : 'green', msg : "added "+path.relative(options.root,createdFileName)});
								}								
							}
						});	
					}
				},
				toPath = options.folders.src.themes,									
				dirFolder = options.d && typeof options.d == 'string' && options.d != '.' ? options.d :'',
				cssFolderList = [],
				fromPath = path.join(options.cliRoot,"blueprints","generate","css","styles"),		
				styleToPath = path.join(toPath,'styles');
					
			copyFolder(options,fromPath,styleToPath,dirFolder);
			if(!options.nothemes) {
				if(fileManipulation.fileExist(toPath)) {
					cssFolderList  = fileManipulation.readdirSync(toPath);
				}			
				if(cssFolderList.includes("themes")) {
					var themeToPath = path.join(toPath,"themes"),
						themesList = fileManipulation.readdirSync(themeToPath),
						toPathFolder;
					fromPath = path.join(options.cliRoot,"blueprints","generate","css","themes");
					themesList.forEach(function(list){
						if(fileManipulation.validateFile(list)) {						
							toPathFolder = path.join(themeToPath,list);						
							copyFolder(options,fromPath,toPathFolder,dirFolder);						
						}
					});
				}
			}
		}
	},

	beforeUninstall : function(options) {
		var themesList,toPathFolder;
		var subFolder; 
		var msg='';
		var srcFolders = options.folders.src;
		var rootPath = options.root;
		var pathFolder,cssFolderList;
		subFolder = (options.d && options.d!='.') ? options.d : '';
		pathFolder = {folder :['javascript','templates','styles'],type :[".js",".html",".css"]}
		var file;
		for(var i = 0; i < pathFolder.folder.length ;i++ ) {
			file = path.join(srcFolders[pathFolder.folder[i]],subFolder,options.cliArgs[2]+pathFolder.type[i])
			if(fileManipulation.fileExist(file)){
				filePath.push(file);				
			} else {
				msg = msg+ "Component named "+path.relative(rootPath,path.join(srcFolders[pathFolder.folder[i]],subFolder,options.cliArgs[2]+pathFolder.type[i]))+" doesn't exist\n"
			}
		}
		if(options.theming) {
			var toPath=srcFolders.themes;
			if(fileManipulation.fileExist(srcFolders.themes)){
				cssFolderList  = fileManipulation.readdirSync(srcFolders.themes);
			}
			if(cssFolderList && (cssFolderList).indexOf("styles")!= -1){
				if(!fileManipulation.fileExist(path.join(toPath,"styles",subFolder,options.cliArgs[2]+".less"))){
					msg=msg +"Theme named "+path.relative(rootPath,path.join(toPath,"styles",subFolder,options.cliArgs[2]+".less"))+" doesn't exist\n";
				}
			}	
			if(!options.nothemes) {			
				if(cssFolderList && (cssFolderList).indexOf("themes")!= -1) {
				themesList = fileManipulation.readdirSync(path.join(options.folders.src.themes,"themes"));
					themesList.forEach(function(list){
						if(fileManipulation.validateFile(list)) {
							toPathFolder = path.join(toPath,"themes",list,subFolder,options.cliArgs[2]+".less");						
							if(!fileManipulation.fileExist(toPathFolder)){
								msg = msg+ "Theme named "+path.relative(rootPath,toPathFolder)+" doesn't exist\n"
							}
						}
					});
				}
			}

		}
		if(filePath.length == 0) {
			this.reject(new Error(msg));
		}
	},

	uninstall : function(options) {
		var permitFlag = true;
		var rootPath = options.root;
		var fileObj,folder,ext;
		filePath.forEach(function(file) {
			fileManipulation.removeSync(file,permitFlag);
			options.log.user({color : 'green',msg :"Removed File :"+path.relative(rootPath,file)});
			if(fileManipulation.fileExist(options.logPath)) {
				options.log.system("Removed File : "+path.relative(rootPath,file)+'\n');
			}
			fileObj = path.parse(file);
			ext = fileObj.ext;
			folder = ext == '.js' ? "javascript" : (ext == '.html' ? "templates" :"styles");
			folders.removeEmptyFolder(file,folder,options);
		});
		if(options.theming){
			let userLog = options.log.user
			var dirFolder;
				dirFolder = options.d ?  options.d :'';
			
			var toPath = options.folders.src.themes;
            var themesList,toPathFolder,cssFolderList;
			if(fileManipulation.fileExist(toPath)){
				cssFolderList  = fileManipulation.readdirSync(toPath);
			}
			if(cssFolderList && (cssFolderList).indexOf("styles")!= -1){
				fileManipulation.removeSync(path.join(toPath,"styles",dirFolder,options.cliArgs[2]+".less"),permitFlag);
				userLog({color : 'green', msg : "Removed "+path.relative(rootPath,path.join(toPath,"styles",dirFolder,options.cliArgs[2]+".less"))});
			}	
			if(!options.nothemes) {	
				if(cssFolderList && (cssFolderList).indexOf("themes")!= -1) {
					themesList = fileManipulation.readdirSync(path.join(toPath,"themes"));
					themesList.forEach(function(list){
						if(fileManipulation.validateFile(list)) {	
							toPathFolder = path.join(toPath,"themes",list);						
							fileManipulation.removeSync(path.join(toPathFolder,dirFolder,options.cliArgs[2]+".less"),permitFlag);
							userLog({color : 'green', msg : "Removed "+path.relative(rootPath,path.join(toPath,"themes",list,dirFolder,options.cliArgs[2]+".less"))});
						}
					});
				}
			}
		}
	}
};



