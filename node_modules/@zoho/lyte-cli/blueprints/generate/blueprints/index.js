"use strict";
require = global.require;
var path = require("path"),
	utils = require("@zoho/lyte-cli-utils"),
	stringManipulation = utils.stringManipulation,
	pluralize = stringManipulation.pluralize.bind(stringManipulation),
	fileManipulation = utils.fileManipulation,
	folders = utils.commonCliUtils,
	tokens,
	commonFn =  function(secondArg,defaultModuleName) {
		var moduleName = secondArg;
		if(folders.validateModuleName(secondArg,defaultModuleName)) {
			moduleName = pluralize(secondArg);
		}
		return moduleName;
	};
module.exports = {
	description :"Generates a blueprint and definition.",
	validateEntityName : function() {
		return true;
	},
	beforeInstall : function(options) {
		var secondArgs = options.cliArgs[2];
		var blueprintPath =  path.join(options.root,"build","blueprints",pluralize(secondArgs));
		if(fileManipulation.fileExist(blueprintPath)) {
			if(process.env.PRODUCTION) {
				this.reject("Blueprints named "+secondArgs+" already exist");
			} else {
				if(!fileManipulation.prompt("Blueprints named "+secondArgs+" already exist.Do u want to replace the blueprint with new one ???Yes/No")) {
					this.reject(new Error("Permission denied to delete the blueprint"));
				}
			}
		} else {
			return true;
		}
	},

	install : function(options) {
		var from,to,toPathForIndexFile,
			secondArg = options.cliArgs[2],
			pluralizeModule = pluralize(secondArg),
			srcFolders = options.folders.src,
			copyGenerate = function(options,from,to) {
				var fromPath,toPath;
				fileManipulation.readdirSync(from).forEach(function(file) {
					fromPath = path.join(from,file);
					if(fromPath.indexOf("index.js") == -1) {
						toPath = path.join(to,file);
						if(Object.keys(tokens).indexOf(path.parse(file).name) != -1) {
							toPath = toPath.replace(path.parse(file).name,tokens[path.parse(file).name])
						}
						if(fileManipulation.lstatSync(fromPath).isDirectory()){
							fileManipulation.mkdirSync(toPath);
							copyGenerate(options,fromPath,toPath);
						} else {
							fileManipulation.mkdirSync(path.parse(toPath).dir);
							fileManipulation.writeSync(toPath,fileManipulation.readSync(fromPath),true);
							options.log.user({color :"green",msg : "added "+path.relative(options.root,toPath)});
						}
					}
				}.bind(this));
			};
		srcFolders.blueprints = srcFolders.blueprints || path.join(options.root,"build","blueprints");
		if(secondArg == "theme") {
			this.reject(new Error("Blueprint for module theme is not supported"));
		} else {
			if(folders.validateModuleName(secondArg,options.moduleList)) {
				from = path.join(options.cliRoot,"blueprints","generate",pluralizeModule);		
				to = path.join(srcFolders.blueprints,pluralizeModule);
				tokens = {
					__path__ : pluralizeModule
				};
				toPathForIndexFile = path.join(to,"index.js");					
			} else {
				from = path.join(options.cliRoot,"blueprints","generate","blueprints");
				to = srcFolders.blueprints;
				tokens = {
					__path__ : secondArg
				};
				toPathForIndexFile =  path.join(to,secondArg,"index.js");
			}
			copyGenerate(options,from,to);
			fileManipulation.mkdirSync(path.parse(toPathForIndexFile).dir);
		
			fileManipulation.writeSync(toPathForIndexFile,fileManipulation.readSync(path.join(options.cliRoot,"blueprints","generate","blueprints","__path__","index.js"),'utf-8'))
		}
		return true;
	},
	
	beforeUninstall : function(options) {
		var secondArg = options.cliArgs[2];
		var moduleName = commonFn(secondArg,options.moduleList)
		if(!fileManipulation.fileExist(path.join(options.root,"build","blueprints",moduleName))) {
			if(fileManipulation.fileExist(path.join(options.cliRoot,"blueprints","generate",moduleName))) {
				this.reject(new Error("Custom blueprint named "+secondArg+" not found. Blueprint "+secondArg+" is an default blueprint .Not allowed to delete"));
			} else {
				this.reject(new Error("Custom blueprint named "+secondArg+" not found"));
			}
		} else {
			return true;
		}			
	},

	uninstall : function(options) {
		var secondArg = options.cliArgs[2];
		var moduleName = commonFn(secondArg,options.moduleList)
		
		var filePath = path.join(options.root,"build","blueprints",moduleName);
		options.log.user({color:"green",msg : "Removed :"+path.relative(options.root,filePath)});
		fileManipulation.removeSync(filePath,true);
		return true;
	}

};


