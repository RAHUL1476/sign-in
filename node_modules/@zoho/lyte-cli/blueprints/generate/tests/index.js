"use strict";
var utils = require("@zoho/lyte-cli-utils"),
	folders = utils.commonCliUtils,
	fileManipulation = utils.fileManipulation,
	path=require('path'),
	filePath;
module.exports ={
	description :"test",
	validateEntityName : function(options) {
		if(folders.validateComponentName(options.cliArgs[2])) {
			options.cliArgs[2] = options.cliArgs[2]+'.spec'
			return true;
		}
		options.log.user({color : 'red', msg : "Test file names should not contain capital letters and special character except hyphen.Names should be hypenated"});		
		return false;
	},

	fileMapTokens :function(options)	{
		return {
			__demo__ : options.cliArgs[2],
			__path__ : options["functional-test"] ? "functional_tests": "unit_tests"
		}
	},

	locals :function(options)  {
		return {
			id :options.cliArgs[2]
		}
	},


	beforeInstall : function(options) {		
		var subFolder;
		subFolder = (options.d && options.d != '.') ? options.d :'';
		if(options['functional-test']){
			filePath = path.join(options.folders.src['tests'],"functional_tests",subFolder,options.cliArgs[2]);
		}  else {
			filePath = path.join(options.folders.src['tests'],"unit_tests",subFolder,options.cliArgs[2]);	
		}	
	},

	beforeUninstall : function(options) {
		var subFolder;
		subFolder = (options.d && options.d != '.') ? options.d :'';
		if(options["functional-test"]){
			filePath = path.join(options.folders.src["tests"],"functional_tests",subFolder,options.cliArgs[2]+'.js');
		} else {
			filePath = path.join(options.folders.src["tests"],"unit_tests",subFolder,options.cliArgs[2]+'.js');	
		}
		
	 	if(!fileManipulation.fileExist(filePath)){
			 // Check if the file.js is available and ask prompt for deleting that file
			let replacedFilePath = filePath.replace('.spec.js','.js');
			if(fileManipulation.fileExist(replacedFilePath)){
				if(!fileManipulation.prompt('Are you sure you want to delete '+ replacedFilePath +'?? Y/N','red')){
					this.reject(new Error("test named "+path.relative(options.root,replacedFilePath)+" is not deleted"))
				}else{
					filePath = replacedFilePath;
				}
			}else{
				this.reject(new Error("test named "+path.relative(options.root,filePath)+" doesn't exists"))
			}
		}
	
	},

	uninstall : function(options) {
		var permitFlag = true;
	    fileManipulation.removeSync(filePath,permitFlag);	
		options.log.user({color : 'green', msg : "Removed File : "+path.relative(options.root,filePath)})
		if(fileManipulation.fileExist(options.logPath)) {
			options.log.system("Removed File : "+path.relative(options.root,filePath)+'\n');
		}
	},	
};
